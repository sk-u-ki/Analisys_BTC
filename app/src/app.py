"""
–ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–†–ò–ü–¢–û–ê–î–û–ü–¶–ò–ò –° API –ò–ù–¢–ï–ì–†–ê–¶–ò–ï–ô (2010-2025)
–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
–í–µ—Ä—Å–∏—è: 2025.1 (Standalone)
"""

import os
import datetime as dt
import warnings
from typing import Tuple, Dict, Any, List
import sys
import numpy as np
import pandas as pd
from scipy import stats
import requests
from functools import lru_cache
import matplotlib.pyplot as plt
import plotly.graph_objects as go
import plotly.express as px

warnings.filterwarnings("ignore")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ù–ê–°–¢–†–û–ô–ö–ò ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
pd.options.display.float_format = lambda x: f"{x:.0f}" if pd.notna(x) and x % 1 == 0 else f"{x:.2f}"
plt.rcParams["font.family"] = ["DejaVu Sans"]
plt.rcParams["axes.unicode_minus"] = False

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ API –ú–û–î–£–õ–¨ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
BASE_URL = "https://api.worldbank.org/v2/country/{iso}/indicator/{ind}?format=json&per_page=100"

INDICATORS = {
    "gdp_per_capita": "NY.GDP.PCAP.KD",       # –í–í–ü –Ω–∞ –¥—É—à—É (–ø–æ—Å—Ç. USD-2015)
    "inflation":      "FP.CPI.TOTL.ZG",       # –ò–Ω—Ñ–ª—è—Ü–∏—è, % –≥/–≥
    "unemployment":   "SL.UEM.TOTL.ZS",       # –ë–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–∞, % labor force
}

@lru_cache(maxsize=None)
def fetch_indicator(iso: str, ind_code: str) -> pd.DataFrame:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–¥–∏–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —á–µ—Ä–µ–∑ World Bank API"""
    try:
        url = BASE_URL.format(iso=iso.lower(), ind=ind_code)
        response = requests.get(url, timeout=15)
        
        if response.status_code == 200:
            data = response.json()
            if len(data) > 1 and data[1]:
                payload = data[1]
                df = (pd.DataFrame(payload)[["date", "value"]]
                      .dropna()
                      .rename(columns={"date": "Year", "value": ind_code})
                      .astype({"Year": "int32", ind_code: "float64"}))
                return df
        
        return pd.DataFrame(columns=["Year", ind_code])
        
    except Exception as e:
        print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {ind_code} –¥–ª—è {iso}: {e}")
        return pd.DataFrame(columns=["Year", ind_code])

def build_country_frame(iso: str, years: List[int]) -> pd.DataFrame:
    """–°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è —Å—Ç—Ä–∞–Ω—ã"""
    dfs = []
    
    for human_key, wb_code in INDICATORS.items():
        part = fetch_indicator(iso, wb_code).rename(columns={wb_code: human_key})
        dfs.append(part)
    
    if not dfs:
        return pd.DataFrame(columns=["Year"])
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ Year
    df = dfs[0]
    for part in dfs[1:]:
        df = df.merge(part, on="Year", how="outer")
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω—É–∂–Ω—ã–º –≥–æ–¥–∞–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏
    if not df.empty and "Year" in df.columns:
        df = df[df["Year"].isin(years)].sort_values("Year").reset_index(drop=True)
        
        # –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –ø—Ä–æ–ø—É—Å–∫–æ–≤
        for col in df.columns:
            if col != "Year":
                df[col] = df[col].interpolate(method='linear').fillna(method='bfill').fillna(method='ffill')
    
    return df

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ú–û–î–£–õ–¨ –î–ê–ù–ù–´–• ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def model_hdi(country: str, year: int) -> float:
    """–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ HDI"""
    base_hdi_2020 = {
        'UKR': 0.773, 'POL': 0.880, 'CZE': 0.900,
        'SWE': 0.947, 'NOR': 0.961, 'BLR': 0.823
    }
    
    base_value = base_hdi_2020.get(country, 0.800)
    
    if year <= 2010:
        adjustment = -0.05 if country in ['UKR', 'BLR'] else -0.03
    elif year <= 2020:
        adjustment = 0.0
    elif year <= 2022:
        if country == 'UKR': adjustment = -0.04  # –í–æ–π–Ω–∞
        elif country == 'BLR': adjustment = -0.02  # –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∫—Ä–∏–∑–∏—Å
        else: adjustment = 0.0
    else:
        adjustment = -0.04 if country == 'UKR' else 0.0
    
    return round(max(0.5, min(1.0, base_value + adjustment)), 3)

def model_crypto_adoption(country: str, year: int) -> float:
    """–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏–∏"""
    params = {
        'UKR': {'base': 0.1, 'acceleration_year': 2022, 'max_adoption': 15.0},
        'POL': {'base': 0.2, 'acceleration_year': 2020, 'max_adoption': 20.0},
        'CZE': {'base': 0.15, 'acceleration_year': 2021, 'max_adoption': 14.0},
        'SWE': {'base': 0.3, 'acceleration_year': 2019, 'max_adoption': 8.0},
        'NOR': {'base': 0.25, 'acceleration_year': 2019, 'max_adoption': 7.0},
        'BLR': {'base': 0.05, 'acceleration_year': 2020, 'max_adoption': 1.0}
    }
    
    param = params.get(country, params['POL'])
    
    if year <= 2010:
        return 0.0
    elif year <= 2015:
        return param['base'] * (year - 2010) / 5
    elif year <= param['acceleration_year']:
        base_2015 = param['base']
        years_since_2015 = year - 2015
        return base_2015 + (2.0 * years_since_2015 / (param['acceleration_year'] - 2015))
    else:
        years_since_acceleration = year - param['acceleration_year']
        base_at_acceleration = param['base'] + 2.0
        growth_rate = 0.3
        max_adoption = param['max_adoption']
        return max_adoption / (1 + np.exp(-growth_rate * years_since_acceleration)) * (base_at_acceleration / max_adoption)

def model_government_trust(country: str, year: int) -> int:
    """–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–≤–µ—Ä–∏—è –∫ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤—É"""
    base_trust = {'UKR': 22, 'POL': 37, 'CZE': 42, 'SWE': 75, 'NOR': 68, 'BLR': 14}
    trust = base_trust.get(country, 40)
    
    if country == 'UKR':
        if year <= 2013: return 40
        elif year <= 2019: return 25
        elif year <= 2021: return 23
        else: return 22
    elif country == 'BLR':
        if year <= 2019: return 15
        else: return 12
    else:
        variation = np.sin((year - 2010) * 0.5) * 3
        return max(5, min(95, int(trust + variation)))

def model_corruption_index(country: str, year: int) -> int:
    """–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –∫–æ—Ä—Ä—É–ø—Ü–∏–∏"""
    corruption_2023 = {'UKR': 33, 'POL': 45, 'CZE': 56, 'SWE': 83, 'NOR': 85, 'BLR': 47}
    
    if year <= 2015:
        base_values = {'UKR': 26, 'POL': 53, 'CZE': 46, 'SWE': 92, 'NOR': 89, 'BLR': 25}
        return base_values.get(country, 50)
    else:
        base = {'UKR': 26, 'POL': 53, 'CZE': 46, 'SWE': 92, 'NOR': 89, 'BLR': 25}.get(country, 50)
        target = corruption_2023.get(country, 50)
        progress = min(1.0, (year - 2015) / (2023 - 2015))
        return int(base + (target - base) * progress)

def optimize_int_columns(df: pd.DataFrame) -> pd.DataFrame:
    """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
    for col in df.columns:
        if df[col].dtype == 'float64':
            if df[col].notna().all() and (df[col] % 1 == 0).all():
                df[col] = df[col].astype('Int64')
    return df

def extended_data_2010_2025(base_path: str = ".") -> Tuple[pd.DataFrame, Dict[str, Any]]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API"""
    print("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ World Bank API...")
    
    YEARS = list(range(2010, 2026))
    
    COUNTRY_META = {
        "ukr": {
            "name_ru": "–£–∫—Ä–∞–∏–Ω–∞", "currency": "UAH", "population": 41.2, "internet_penetration": 71,
            "main_crypto": ['Bitcoin', 'USDT', 'Ethereum'], "strategy_type": "–ó–ê–©–ò–¢–ù–ò–ö",
            "crypto_preference": "Stablecoins (–∑–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–≤–∞–ª—å–≤–∞—Ü–∏–∏)",
            "crypto_drivers": "–ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–≤–∞–ª—å–≤–∞—Ü–∏–∏ –≥—Ä–∏–≤–Ω—ã, –æ–±—Ö–æ–¥ —Å–∞–Ω–∫—Ü–∏–π, –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã"
        },
        "pol": {
            "name_ru": "–ü–æ–ª—å—à–∞", "currency": "PLN", "population": 37.7, "internet_penetration": 85,
            "main_crypto": ['Bitcoin', 'Ethereum', 'Polish tokens'], "strategy_type": "–î–ò–í–ï–†–°–ò–§–ò–ö–ê–¢–û–†",
            "crypto_preference": "Bitcoin (–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏)",
            "crypto_drivers": "–î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è, —Ö–µ–¥–∂ –ø—Ä–æ—Ç–∏–≤ –∑–ª–æ—Ç–æ–≥–æ, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"
        },
        "cze": {
            "name_ru": "–ß–µ—Ö–∏—è", "currency": "CZK", "population": 10.7, "internet_penetration": 88,
            "main_crypto": ['Bitcoin', 'Ethereum', 'Local tokens'], "strategy_type": "–î–ò–í–ï–†–°–ò–§–ò–ö–ê–¢–û–†",
            "crypto_preference": "Bitcoin (–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏)",
            "crypto_drivers": "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏, –∑–∞—â–∏—Ç–∞ –æ—Ç –∏–Ω—Ñ–ª—è—Ü–∏–∏, –µ–≤—Ä–æ–ø–µ–π—Å–∫–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è"
        },
        "swe": {
            "name_ru": "–®–≤–µ—Ü–∏—è", "currency": "SEK", "population": 10.5, "internet_penetration": 97,
            "main_crypto": ['Bitcoin', 'Ethereum', 'Green crypto'], "strategy_type": "–ò–ù–ù–û–í–ê–¢–û–†",
            "crypto_preference": "Ethereum (DeFi –∏ —ç–∫–æ–ª–æ–≥–∏—è)",
            "crypto_drivers": "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏, —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã, —Ü–∏—Ñ—Ä–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞"
        },
        "nor": {
            "name_ru": "–ù–æ—Ä–≤–µ–≥–∏—è", "currency": "NOK", "population": 5.4, "internet_penetration": 98,
            "main_crypto": ['Bitcoin', 'Ethereum', 'Green mining'], "strategy_type": "–ò–ù–ù–û–í–ê–¢–û–†",
            "crypto_preference": "Bitcoin (–∑–µ–ª–µ–Ω—ã–π –º–∞–π–Ω–∏–Ω–≥)",
            "crypto_drivers": "–î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ—Ñ—Ç—è–Ω–æ–≥–æ —Ñ–æ–Ω–¥–∞, –∑–µ–ª–µ–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –∏–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"
        },
        "blr": {
            "name_ru": "–ë–µ–ª–∞—Ä—É—Å—å", "currency": "BYN", "population": 9.4, "internet_penetration": 79,
            "main_crypto": ['Bitcoin', 'USDT', 'Local mining'], "strategy_type": "–ü–û–î–ê–í–õ–ï–ù–ù–´–ô",
            "crypto_preference": "USDT (–æ–±—Ö–æ–¥ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)",
            "crypto_drivers": "–û–±—Ö–æ–¥ —Å–∞–Ω–∫—Ü–∏–π, IT-—ç–∫—Å–ø–æ—Ä—Ç, –º–∞–π–Ω–∏–Ω–≥, –∑–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–≤–∞–ª—å–≤–∞—Ü–∏–∏"
        }
    }
    
    rows = []
    countries_data = {}
    
    for iso, meta in COUNTRY_META.items():
        try:
            print(f"   üåê –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {meta['name_ru']}...")
            econ = build_country_frame(iso, YEARS)
            
            if len(econ) == 0:
                print(f"   ‚ö†Ô∏è –ù–µ—Ç API –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {meta['name_ru']}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
                continue
            
            for _, rec in econ.iterrows():
                year = int(rec["Year"])
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
                gdp_growth = 2.0  # –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                if len(econ[econ['Year'] < year]) > 0:
                    prev_gdp = econ[econ['Year'] == year - 1]['gdp_per_capita']
                    if len(prev_gdp) > 0 and prev_gdp.iloc[0] > 0:
                        gdp_growth = ((rec['gdp_per_capita'] / prev_gdp.iloc[0]) - 1) * 100
                
                # –ú–æ–¥–µ–ª–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
                crypto_adoption = model_crypto_adoption(iso.upper(), year)
                government_trust = model_government_trust(iso.upper(), year)
                corruption_index = model_corruption_index(iso.upper(), year)
                hdi = model_hdi(iso.upper(), year)
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ
                currency_volatility = abs(rec["inflation"]) * 0.8
                political_stability = (government_trust - 50) / 50
                
                # –¢–æ—Ä–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ)
                base_trade = rec["gdp_per_capita"] * meta["population"] * 0.3
                exports = base_trade * (1 + (year - 2010) * 0.02) / 1e9
                imports = exports * 0.9
                
                # –ì–æ—Å–¥–æ–ª–≥ (–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ)
                base_debt = 30.0 if iso == 'nor' else 40.0
                government_debt = base_debt + (year - 2010) * 0.5
                
                row = {
                    "Year": year,
                    "Country": iso.upper(),
                    "Country_RU": meta["name_ru"],
                    "Currency": meta["currency"],
                    "GDP_Per_Capita": int(rec["gdp_per_capita"]) if pd.notna(rec["gdp_per_capita"]) else 0,
                    "Inflation": round(float(rec["inflation"]), 2) if pd.notna(rec["inflation"]) else 0.0,
                    "Unemployment": round(float(rec["unemployment"]), 2) if pd.notna(rec["unemployment"]) else 0.0,
                    "Crypto_Adoption": round(crypto_adoption, 2),
                    "GDP_Growth": round(gdp_growth, 2),
                    "Currency_Volatility": round(currency_volatility, 2),
                    "Exports": round(exports, 1),
                    "Imports": round(imports, 1),
                    "Government_Debt": round(government_debt, 1),
                    "Government_Trust": government_trust,
                    "Corruption_Index": corruption_index,
                    "Political_Stability": round(political_stability, 2),
                    "HDI": hdi,
                    "Population": round(meta["population"], 1),
                    "Internet_Penetration": int(meta["internet_penetration"]),
                    "Strategy_Type": meta["strategy_type"],
                    "Main_Crypto": ", ".join(meta["main_crypto"]),
                    "Crypto_Preference": meta["crypto_preference"],
                    "Crypto_Drivers": meta["crypto_drivers"],
                }
                rows.append(row)
            
            # –°–æ–∑–¥–∞–µ–º countries_data –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            countries_data[iso.upper()] = meta
            print(f"   ‚úÖ {meta['name_ru']}: {len(econ)} –∑–∞–ø–∏—Å–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {meta['name_ru']}: {e}")
            continue
    
    df = optimize_int_columns(pd.DataFrame(rows))
    df["Year"] = df["Year"].astype("int32")
    
    print(f"‚úÖ –î–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–µ–Ω–æ: {len(df)} –∑–∞–ø–∏—Å–µ–π —á–µ—Ä–µ–∑ API")
    return df, countries_data

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –£–¢–ò–õ–ò–¢–´ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def create_project_structure(base_dir: str = ".") -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞"""
    folders = ["dannye", "grafiki", "otchety", "rezultaty", "strany_analiz"]
    
    for folder in folders:
        folder_path = os.path.join(base_dir, folder)
        os.makedirs(folder_path, exist_ok=True)
    
    print(f"üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤: {base_dir}")
    return base_dir

def save_excel_report(df: pd.DataFrame, base_dir: str):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ Excel –æ—Ç—á–µ—Ç–∞"""
    excel_path = os.path.join(base_dir, "otchety", "crypto_analysis_api.xlsx")
    
    with pd.ExcelWriter(excel_path, engine='openpyxl') as writer:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        df.to_excel(writer, sheet_name='–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', index=False)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
        if 'Country_RU' in df.columns:
            numeric_cols = df.select_dtypes(include=[np.number]).columns
            numeric_cols = [col for col in numeric_cols if col not in ['Year']]
            
            if len(numeric_cols) > 0:
                country_stats = df.groupby('Country_RU')[numeric_cols].agg(['mean', 'std', 'min', 'max']).round(2)
                country_stats.to_excel(writer, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º')
        
        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
        if len(numeric_cols) > 1:
            corr_matrix = df[numeric_cols].corr().round(3)
            corr_matrix.to_excel(writer, sheet_name='–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏')
    
    print(f"üíæ Excel –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {excel_path}")

def create_basic_charts(df: pd.DataFrame, base_dir: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    grafiki_dir = os.path.join(base_dir, "grafiki")
    os.makedirs(grafiki_dir, exist_ok=True)
    
    # –ì—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ –í–í–ü
    if 'GDP_Per_Capita' in df.columns and 'Country_RU' in df.columns:
        plt.figure(figsize=(12, 8))
        
        for country in df['Country_RU'].unique():
            country_data = df[df['Country_RU'] == country]
            plt.plot(country_data['Year'], country_data['GDP_Per_Capita'], 
                    marker='o', label=country, linewidth=2)
        
        plt.title('–î–∏–Ω–∞–º–∏–∫–∞ –í–í–ü –Ω–∞ –¥—É—à—É –Ω–∞—Å–µ–ª–µ–Ω–∏—è (2010-2025)', fontsize=14, fontweight='bold')
        plt.xlabel('–ì–æ–¥')
        plt.ylabel('–í–í–ü –Ω–∞ –¥—É—à—É (USD)')
        plt.legend()
        plt.grid(True, alpha=0.3)
        plt.tight_layout()
        
        chart_path = os.path.join(grafiki_dir, 'gdp_dynamics.png')
        plt.savefig(chart_path, dpi=300, bbox_inches='tight')
        plt.close()
        print(f"üìä –ì—Ä–∞—Ñ–∏–∫ –í–í–ü —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {chart_path}")
    
    # –ì—Ä–∞—Ñ–∏–∫ –∏–Ω—Ñ–ª—è—Ü–∏–∏
    if 'Inflation' in df.columns and 'Country_RU' in df.columns:
        plt.figure(figsize=(12, 8))
        
        for country in df['Country_RU'].unique():
            country_data = df[df['Country_RU'] == country]
            plt.plot(country_data['Year'], country_data['Inflation'], 
                    marker='s', label=country, linewidth=2)
        
        plt.title('–î–∏–Ω–∞–º–∏–∫–∞ –∏–Ω—Ñ–ª—è—Ü–∏–∏ (2010-2025)', fontsize=14, fontweight='bold')
        plt.xlabel('–ì–æ–¥')
        plt.ylabel('–ò–Ω—Ñ–ª—è—Ü–∏—è (%)')
        plt.legend()
        plt.grid(True, alpha=0.3)
        plt.tight_layout()
        
        chart_path = os.path.join(grafiki_dir, 'inflation_dynamics.png')
        plt.savefig(chart_path, dpi=300, bbox_inches='tight')
        plt.close()
        print(f"üìä –ì—Ä–∞—Ñ–∏–∫ –∏–Ω—Ñ–ª—è—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {chart_path}")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def main():
    print("üöÄ –ê–ù–ê–õ–ò–ó: –í–ª–∏—è–Ω–∏–µ –¥–æ–≤–µ—Ä–∏—è –∫ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É –Ω–∞ –∞–¥–æ–ø—Ü–∏—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
    print("üåê –í–ï–†–°–ò–Ø: API Integration (Standalone)")
    print("=" * 70)
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
        base = create_project_structure()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API
        print("\nüìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        df, countries = extended_data_2010_2025(base)
        
        if len(df) == 0:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API")
            return
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(df)} –∑–∞–ø–∏—Å–µ–π")
        print(f"üìä –°—Ç—Ä–∞–Ω—ã: {list(countries.keys())}")
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\nüìä –ë–ê–ó–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print("=" * 40)
        
        available_cols = df.columns.tolist()
        print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {len(available_cols)}")
        
        if 'GDP_Per_Capita' in df.columns:
            print(f"üí∞ –í–í–ü –Ω–∞ –¥—É—à—É: ${df['GDP_Per_Capita'].min():,.0f} - ${df['GDP_Per_Capita'].max():,.0f} (—Å—Ä–µ–¥–Ω–µ–µ: ${df['GDP_Per_Capita'].mean():,.0f})")
        
        if 'Inflation' in df.columns:
            print(f"üìà –ò–Ω—Ñ–ª—è—Ü–∏—è: {df['Inflation'].min():.2f}% - {df['Inflation'].max():.2f}% (—Å—Ä–µ–¥–Ω–µ–µ: {df['Inflation'].mean():.2f}%)")
        
        if 'Crypto_Adoption' in df.columns:
            print(f"ü™ô –ö—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏—è: {df['Crypto_Adoption'].min():.2f}% - {df['Crypto_Adoption'].max():.2f}% (—Å—Ä–µ–¥–Ω–µ–µ: {df['Crypto_Adoption'].mean():.2f}%)")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
        print(f"\nüåç –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–¢–†–ê–ù–ê–ú:")
        for country_code, meta in countries.items():
            country_data = df[df['Country'] == country_code]
            if len(country_data) > 0:
                avg_gdp = country_data['GDP_Per_Capita'].mean() if 'GDP_Per_Capita' in country_data.columns else 0
                avg_crypto = country_data['Crypto_Adoption'].mean() if 'Crypto_Adoption' in country_data.columns else 0
                print(f"   {meta['name_ru']}: {len(country_data)} –∑–∞–ø–∏—Å–µ–π, –í–í–ü: ${avg_gdp:,.0f}, –∫—Ä–∏–ø—Ç–æ: {avg_crypto:.2f}%")
        
        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        print(f"\nüîç –ö–û–†–†–ï–õ–Ø–¶–ò–û–ù–ù–´–ô –ê–ù–ê–õ–ò–ó:")
        print("-" * 30)
        
        if 'Inflation' in df.columns and 'Crypto_Adoption' in df.columns:
            corr1 = df['Inflation'].corr(df['Crypto_Adoption'])
            print(f"üìä –ò–Ω—Ñ–ª—è—Ü–∏—è ‚Üî –ö—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏—è: {corr1:.3f}")
        
        if 'Government_Trust' in df.columns and 'Crypto_Adoption' in df.columns:
            corr2 = df['Government_Trust'].corr(df['Crypto_Adoption'])
            print(f"üèõÔ∏è –î–æ–≤–µ—Ä–∏–µ ‚Üî –ö—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏—è: {corr2:.3f}")
        
        if 'HDI' in df.columns and 'Crypto_Adoption' in df.columns:
            corr3 = df['HDI'].corr(df['Crypto_Adoption'])
            print(f"üåü HDI ‚Üî –ö—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏—è: {corr3:.3f}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print(f"\nüíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
        print("-" * 30)
        
        # Excel –æ—Ç—á–µ—Ç
        save_excel_report(df, base)
        
        # –ë–∞–∑–æ–≤—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
        create_basic_charts(df, base)
        
        # –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
        if 'Country_RU' in df.columns:
            numeric_cols = ['GDP_Per_Capita', 'Inflation', 'Unemployment', 'Crypto_Adoption', 'HDI']
            available_numeric = [col for col in numeric_cols if col in df.columns]
            
            if available_numeric:
                country_summary = df.groupby('Country_RU')[available_numeric].mean().round(2)
                print(f"\nüìã –°–í–û–î–ö–ê –ü–û –°–¢–†–ê–ù–ê–ú:")
                print(country_summary)
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏
                summary_path = os.path.join(base, "otchety", "country_summary.csv")
                country_summary.to_csv(summary_path, encoding='utf-8')
                print(f"üíæ –°–≤–æ–¥–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {summary_path}")
        
        print(f"\nüèÅ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø–∞–ø–∫–µ: {base}")
        print(f"üìä Excel –æ—Ç—á–µ—Ç: {os.path.join(base, 'otchety', 'crypto_analysis_api.xlsx')}")
        print(f"üìà –ì—Ä–∞—Ñ–∏–∫–∏: {os.path.join(base, 'grafiki')}")
        
    except Exception as exc:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {exc}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüëã –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as exc:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {exc}")
        import traceback
        traceback.print_exc()
