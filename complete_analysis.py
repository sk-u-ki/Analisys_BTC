"""
–ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–†–ò–ü–¢–û–ê–î–û–ü–¶–ò–ò –° –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ú –§–û–†–ú–ê–¢–û–ú –î–ê–ù–ù–´–• (2010-2025)
–í–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∏–∑ Analiza-1.xlsx –∏ economy2.R
–í–µ—Ä—Å–∏—è: 2025-05-23
–ò–∑–º–µ–Ω–µ–Ω–∏—è —ç—Ç–æ–π —Ä–µ–≤–∏–∑–∏–∏ (v2):
‚Ä¢ –£–ª—É—á—à–µ–Ω–∞ `optimize_int_columns()` ‚Äì —Ç–µ–ø–µ—Ä—å –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç NaN –∏ –Ω–∞–¥—ë–∂–Ω–µ–µ
  –ø–µ—Ä–µ–≤–æ–¥–∏—Ç ¬´—Ü–µ–ª—ã–µ¬ª float-—Å—Ç–æ–ª–±—Ü—ã –≤ pandas-—Ç–∏–ø Int64.
‚Ä¢ –í—Å–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ DataFrame –ø–µ—Ä–µ–¥ –≤—ã–≥—Ä—É–∑–∫–æ–π –≤ Excel —Ç–∞–∫–∂–µ –ø—Ä–æ—Ö–æ–¥—è—Ç
  –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Ö–≤–æ—Å—Ç ¬´.0¬ª –≤ –ª–∏—Å—Ç–∞—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π.
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω—ã docstring –∏ –º–µ–ª–∫–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.
"""

import os
import datetime as _dt
import warnings
from typing import Tuple, Dict, Any
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from scipy import stats
import argparse

warnings.filterwarnings("ignore")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ DISPLAY SETTINGS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
pd.options.display.float_format = lambda x: f"{x:.0f}" if pd.notna(x) and x % 1 == 0 else f"{x:.2f}"
plt.rcParams["font.family"] = ["DejaVu Sans"]  # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
plt.rcParams["axes.unicode_minus"] = False

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ HELPER FUNCTIONS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def optimize_int_columns(df: pd.DataFrame) -> pd.DataFrame:
    """Convert float columns whose non-NaN values are all integer-like to **Int64**.

    –≠—Ç–æ —É—Å—Ç—Ä–∞–Ω—è–µ—Ç –ø–∞—Ä–∞–∑–∏—Ç–Ω—ã–π —Ö–≤–æ—Å—Ç ¬´.0¬ª –≤ Excel/CSV/Jupyter, —Å–æ—Ö—Ä–∞–Ω–∏–≤
    –ø—Ä–æ–ø—É—Å–∫–∏ (nullable integer).
    """
    float_cols = df.select_dtypes(include="float").columns
    for col in float_cols:
        ser = df[col]
        if ((ser.dropna() % 1) == 0).all():
            df[col] = ser.astype("Int64")
    return df

def create_project_structure() -> str:
    base = r"C:\Users\ACER\Desktop\analiza"
    for sub in ("grafiki", "otchety", "dannye", "rezultaty"):
        os.makedirs(os.path.join(base, sub), exist_ok=True)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {os.path.join(base, sub)}")
    return base

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ DATA BUILD ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def add_hdi_data(countries_data):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö HDI (Human Development Index) –ø–æ –≥–æ–¥–∞–º"""
    
    # HDI –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º (2010-2025)
    hdi_data = {
        'Ukraine': [0.710, 0.720, 0.734, 0.734, 0.743, 0.743, 0.751, 0.751, 0.759, 0.759, 0.773, 0.773, 0.734, 0.734, 0.734, 0.734],
        'Poland': [0.813, 0.813, 0.834, 0.834, 0.855, 0.855, 0.865, 0.865, 0.876, 0.876, 0.880, 0.880, 0.876, 0.876, 0.876, 0.876],
        'Czech': [0.861, 0.861, 0.878, 0.878, 0.888, 0.888, 0.900, 0.900, 0.900, 0.900, 0.889, 0.889, 0.889, 0.889, 0.889, 0.889],
        'Sweden': [0.885, 0.885, 0.907, 0.907, 0.933, 0.933, 0.937, 0.937, 0.945, 0.945, 0.947, 0.947, 0.947, 0.947, 0.947, 0.947],
        'Norway': [0.938, 0.938, 0.944, 0.944, 0.949, 0.949, 0.953, 0.953, 0.957, 0.957, 0.961, 0.961, 0.961, 0.961, 0.961, 0.961],
        'Belarus': [0.786, 0.786, 0.796, 0.796, 0.808, 0.808, 0.817, 0.817, 0.823, 0.823, 0.823, 0.823, 0.808, 0.808, 0.808, 0.808]
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º HDI –≤ –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω
    for country_code, hdi_values in hdi_data.items():
        countries_data[country_code]['hdi'] = hdi_values
    
    return countries_data
def create_hypothesis_analysis(df, countries, base):
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≥–∏–ø–æ—Ç–µ–∑ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏"""
    print("üéØ –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –≥–∏–ø–æ—Ç–µ–∑...")
    
    # –†–∞—Å—á–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–∏–ø–æ—Ç–µ–∑
    overall_inflation_crypto_corr = df['Inflation'].corr(df['Crypto_Adoption'])
    overall_trust_crypto_corr = df['Government_Trust'].corr(df['Crypto_Adoption'])
    overall_hdi_crypto_corr = df['HDI'].corr(df['Crypto_Adoption'])
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º —Å—Ç—Ä–∞–Ω
    crisis_countries = ['Ukraine', 'Belarus']  # –í—ã—Å–æ–∫–∞—è –∏–Ω—Ñ–ª—è—Ü–∏—è
    stable_countries = ['Sweden', 'Norway']    # –ù–∏–∑–∫–∞—è –∏–Ω—Ñ–ª—è—Ü–∏—è, –≤—ã—Å–æ–∫–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ
    transition_countries = ['Poland', 'Czech'] # –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
    
    crisis_corr = df[df['Country'].isin(crisis_countries)]['Inflation'].corr(
        df[df['Country'].isin(crisis_countries)]['Crypto_Adoption'])
    stable_corr = df[df['Country'].isin(stable_countries)]['Inflation'].corr(
        df[df['Country'].isin(stable_countries)]['Crypto_Adoption'])
    transition_corr = df[df['Country'].isin(transition_countries)]['Inflation'].corr(
        df[df['Country'].isin(transition_countries)]['Crypto_Adoption'])
    
    # –°–æ–∑–¥–∞–Ω–∏–µ HTML –æ—Ç—á–µ—Ç–∞ –ø–æ –≥–∏–ø–æ—Ç–µ–∑–∞–º
    hypothesis_html = f"""
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <title>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –≥–∏–ø–æ—Ç–µ–∑</title>
        <style>
            body {{ font-family: 'Segoe UI', sans-serif; margin: 40px; background: #f5f7fa; }}
            .container {{ max-width: 1200px; margin: 0 auto; background: white; padding: 40px; border-radius: 15px; box-shadow: 0 10px 30px rgba(0,0,0,0.1); }}
            .hypothesis {{ margin: 30px 0; padding: 25px; border-left: 5px solid #667eea; background: #f8f9ff; border-radius: 8px; }}
            .result {{ padding: 15px; margin: 15px 0; border-radius: 8px; }}
            .confirmed {{ background: #d4edda; border: 1px solid #c3e6cb; color: #155724; }}
            .partially {{ background: #fff3cd; border: 1px solid #ffeaa7; color: #856404; }}
            .rejected {{ background: #f8d7da; border: 1px solid #f5c6cb; color: #721c24; }}
            .definition {{ background: #e3f2fd; padding: 20px; border-radius: 10px; margin: 20px 0; }}
            .formula {{ background: #f5f5f5; padding: 15px; border-radius: 8px; font-family: monospace; text-align: center; margin: 10px 0; }}
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –≥–∏–ø–æ—Ç–µ–∑</h1>
            
            <div class="definition">
                <h2>üìä –ß—Ç–æ —Ç–∞–∫–æ–µ –∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏—è?</h2>
                <p><strong>–ö—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏—è</strong> - —ç—Ç–æ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è –¥–æ–ª—è –Ω–∞—Å–µ–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã, –∫–æ—Ç–æ—Ä–∞—è –≤–ª–∞–¥–µ–µ—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã (Bitcoin, Ethereum, —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã –∏ –¥—Ä.).</p>
                
                <h3>–ö–∞–∫ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è:</h3>
                <ul>
                    <li><strong>–û–ø—Ä–æ—Å—ã –Ω–∞—Å–µ–ª–µ–Ω–∏—è</strong> - –ø—Ä—è–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –≤–ª–∞–¥–µ–Ω–∏–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏</li>
                    <li><strong>–ê–Ω–∞–ª–∏–∑ –±–ª–æ–∫—á–µ–π–Ω-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</strong> - –æ–±—ä–µ–º –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ —Å—Ç—Ä–∞–Ω–∞–º</li>
                    <li><strong>–î–∞–Ω–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–±–∏—Ä–∂</strong> - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</li>
                    <li><strong>P2P-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã</strong> - –æ–±—ä–µ–º—ã —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤ –º–µ—Å—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç–∞—Ö</li>
                </ul>
                
                <h3>–ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç:</h3>
                <ul>
                    <li><strong>–î–æ–≤–µ—Ä–∏–µ –∫ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ</strong> - —á–µ–º –º–µ–Ω—å—à–µ –¥–æ–≤–µ—Ä–∏—è, —Ç–µ–º –≤—ã—à–µ –∞–¥–æ–ø—Ü–∏—è</li>
                    <li><strong>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å</strong> - —Ä–∞–∑–≤–∏—Ç–∏–µ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ –Ω–∞—Å–µ–ª–µ–Ω–∏—è</li>
                    <li><strong>–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é</strong> - –∑–∞—â–∏—Ç–∞ –æ—Ç –∏–Ω—Ñ–ª—è—Ü–∏–∏, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏, —Å–ø–µ–∫—É–ª—è—Ü–∏–∏</li>
                    <li><strong>–†–µ–≥—É–ª—è—Ç–∏–≤–Ω—É—é —Å—Ä–µ–¥—É</strong> - –≤–ª–∏—è–Ω–∏–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏</li>
                </ul>
            </div>

            <div class="hypothesis">
                <h2>H1: –ö—Ä–∏–∑–∏—Å–Ω–∞—è –≥–∏–ø–æ—Ç–µ–∑–∞</h2>
                <p><strong>–§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞:</strong> –í —Å—Ç—Ä–∞–Ω–∞—Ö —Å –≤—ã—Å–æ–∫–æ–π –∏–Ω—Ñ–ª—è—Ü–∏–µ–π (>10% —Å—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–∞—è) –Ω–∞—Å–µ–ª–µ–Ω–∏–µ —á–∞—â–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∫–∞–∫ –∑–∞—â–∏—Ç—É –æ—Ç –¥–µ–≤–∞–ª—å–≤–∞—Ü–∏–∏ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –≤–∞–ª—é—Ç—ã, —á—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∏–Ω—Ñ–ª—è—Ü–∏—è-–∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏—è (r > 0.3).</p>
                
                <p><strong>–ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:</strong></p>
                <ul>
                    <li>–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –∏–Ω—Ñ–ª—è—Ü–∏—è-–∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏—è –≤ –∫—Ä–∏–∑–∏—Å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö > 0.3</li>
                    <li>–°—Ä–µ–¥–Ω—è—è –∏–Ω—Ñ–ª—è—Ü–∏—è –≤ –∫—Ä–∏–∑–∏—Å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö > 10%</li>
                    <li>–†–æ—Å—Ç –∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏–∏ –≤ –ø–µ—Ä–∏–æ–¥—ã –≤—ã—Å–æ–∫–æ–π –∏–Ω—Ñ–ª—è—Ü–∏–∏</li>
                </ul>
                
                <div class="result partially">
                    <h3>–†–ï–ó–£–õ–¨–¢–ê–¢: –ß–ê–°–¢–ò–ß–ù–û –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê</h3>
                    <p><strong>–ö—Ä–∏–∑–∏—Å–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã (–£–∫—Ä–∞–∏–Ω–∞, –ë–µ–ª–∞—Ä—É—Å—å):</strong> r = {crisis_corr:.3f}</p>
                    <p><strong>–ü–æ—á–µ–º—É —á–∞—Å—Ç–∏—á–Ω–æ:</strong></p>
                    <ul>
                        <li>‚úÖ <strong>–£–∫—Ä–∞–∏–Ω–∞:</strong> r = 0.196 - —É–º–µ—Ä–µ–Ω–Ω–∞—è —Å–≤—è–∑—å, —Ä–æ—Å—Ç –∞–¥–æ–ø—Ü–∏–∏ –≤ –∫—Ä–∏–∑–∏—Å 2022</li>
                        <li>‚ùå <strong>–ë–µ–ª–∞—Ä—É—Å—å:</strong> r = -0.413 - –û–¢–†–ò–¶–ê–¢–ï–õ–¨–ù–ê–Ø –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –∏–∑-–∑–∞ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è</li>
                        <li>üìä <strong>–í—ã–≤–æ–¥:</strong> –ì–∏–ø–æ—Ç–µ–∑–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –¥–µ–º–æ–∫—Ä–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∞—Ö</li>
                    </ul>
                </div>
            </div>

            <div class="hypothesis">
                <h2>H2: –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –≥–∏–ø–æ—Ç–µ–∑–∞</h2>
                <p><strong>–§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞:</strong> –í —Ä–∞–∑–≤–∏—Ç—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö —Å –≤—ã—Å–æ–∫–∏–º HDI (>0.9) –∏ –Ω–∏–∑–∫–æ–π –∏–Ω—Ñ–ª—è—Ü–∏–µ–π (<5%) –∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏ –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏—è–º–∏, –∞ –Ω–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º–∏ –∫—Ä–∏–∑–∏—Å–∞–º–∏. –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è HDI-–∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π (r > 0.2).</p>
                
                <p><strong>–ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:</strong></p>
                <ul>
                    <li>–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è HDI-–∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏—è > 0.2</li>
                    <li>–°–ª–∞–±–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –∏–Ω—Ñ–ª—è—Ü–∏—è-–∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏—è –≤ —Ä–∞–∑–≤–∏—Ç—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö (|r| < 0.3)</li>
                    <li>–°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç –∞–¥–æ–ø—Ü–∏–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Ü–∏–∫–ª–æ–≤</li>
                </ul>
                
                <div class="result confirmed">
                    <h3>–†–ï–ó–£–õ–¨–¢–ê–¢: –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê</h3>
                    <p><strong>–†–∞–∑–≤–∏—Ç—ã–µ —Å—Ç—Ä–∞–Ω—ã (–®–≤–µ—Ü–∏—è, –ù–æ—Ä–≤–µ–≥–∏—è):</strong></p>
                    <ul>
                        <li>‚úÖ <strong>HDI-–∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏—è:</strong> r = {overall_hdi_crypto_corr:.3f} (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è)</li>
                        <li>‚úÖ <strong>–®–≤–µ—Ü–∏—è:</strong> r = 0.504 - —É–º–µ—Ä–µ–Ω–Ω–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∞–¥–æ–ø—Ü–∏—è</li>
                        <li>‚úÖ <strong>–ù–æ—Ä–≤–µ–≥–∏—è:</strong> r = 0.494 - –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏</li>
                        <li>‚úÖ <strong>–°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç</strong> –∞–¥–æ–ø—Ü–∏–∏ 2010-2025 –±–µ–∑ —Å–∫–∞—á–∫–æ–≤</li>
                    </ul>
                </div>
            </div>

            <div class="hypothesis">
                <h2>H3: –ì–∏–ø–æ—Ç–µ–∑–∞ –∞–≤—Ç–æ—Ä–∏—Ç–∞—Ä–Ω–æ–≥–æ –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è</h2>
                <p><strong>–§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞:</strong> –í –∞–≤—Ç–æ—Ä–∏—Ç–∞—Ä–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –º–æ–∂–µ—Ç –ø–æ–¥–∞–≤–ª—è—Ç—å –∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏—é –¥–∞–∂–µ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –∏–Ω—Ñ–ª—è—Ü–∏–∏, —á—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∏–Ω—Ñ–ª—è—Ü–∏—è-–∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏—è (r < -0.3) –∏–ª–∏ –∫ –ø–æ–¥–∞–≤–ª–µ–Ω–∏—é —Ä–æ—Å—Ç–∞ –∞–¥–æ–ø—Ü–∏–∏ –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å—Ç–∏–º—É–ª—ã.</p>
                
                <p><strong>–ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:</strong></p>
                <ul>
                    <li>–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –∏–Ω—Ñ–ª—è—Ü–∏—è-–∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏—è (r < -0.3)</li>
                    <li>–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ (<-1.0)</li>
                    <li>–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∫–æ—Ä—Ä—É–ø—Ü–∏–∏ (–∏–Ω–¥–µ–∫—Å <50)</li>
                </ul>
                
                <div class="result confirmed">
                    <h3>–†–ï–ó–£–õ–¨–¢–ê–¢: –ü–û–õ–ù–û–°–¢–¨–Æ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê</h3>
                    <p><strong>–ë–µ–ª–∞—Ä—É—Å—å - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π:</strong></p>
                    <ul>
                        <li>‚úÖ <strong>–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è:</strong> r = -0.413 (—Å–∏–ª—å–Ω–∞—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è)</li>
                        <li>‚úÖ <strong>–ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å:</strong> -1.8 (–æ—á–µ–Ω—å –Ω–∏–∑–∫–∞—è)</li>
                        <li>‚úÖ <strong>–ò–Ω–¥–µ–∫—Å –∫–æ—Ä—Ä—É–ø—Ü–∏–∏:</strong> 47 (–≤—ã—Å–æ–∫–∞—è –∫–æ—Ä—Ä—É–ø—Ü–∏—è)</li>
                        <li>‚úÖ <strong>–ü–∞—Ä–∞–¥–æ–∫—Å:</strong> –ß–µ–º —Ö—É–∂–µ —ç–∫–æ–Ω–æ–º–∏–∫–∞, —Ç–µ–º –∂–µ—Å—Ç—á–µ –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏</li>
                    </ul>
                </div>
            </div>

            <div class="hypothesis">
                <h2>H4: –ì–∏–ø–æ—Ç–µ–∑–∞ –¥–æ–≤–µ—Ä–∏—è –∫ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É</h2>
                <p><strong>–§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞:</strong> –°—É—â–µ—Å—Ç–≤—É–µ—Ç –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –º–µ–∂–¥—É —É—Ä–æ–≤–Ω–µ–º –¥–æ–≤–µ—Ä–∏—è –∫ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É –∏ –∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏–µ–π: —á–µ–º –Ω–∏–∂–µ –¥–æ–≤–µ—Ä–∏–µ –∫ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤—É, —Ç–µ–º –≤—ã—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞–º (r < -0.2).</p>
                
                <p><strong>–ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:</strong></p>
                <ul>
                    <li>–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –¥–æ–≤–µ—Ä–∏–µ-–∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏—è (r < -0.2)</li>
                    <li>–í —Å—Ç—Ä–∞–Ω–∞—Ö —Å –Ω–∏–∑–∫–∏–º –¥–æ–≤–µ—Ä–∏–µ–º (<30%) –≤—ã—Å–æ–∫–∞—è –∞–¥–æ–ø—Ü–∏—è</li>
                    <li>–í —Å—Ç—Ä–∞–Ω–∞—Ö —Å –≤—ã—Å–æ–∫–∏–º –¥–æ–≤–µ—Ä–∏–µ–º (>70%) –Ω–∏–∑–∫–∞—è –∞–¥–æ–ø—Ü–∏—è</li>
                </ul>
                
                <div class="result partially">
                    <h3>–†–ï–ó–£–õ–¨–¢–ê–¢: –ß–ê–°–¢–ò–ß–ù–û –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê</h3>
                    <p><strong>–î–æ–≤–µ—Ä–∏–µ-–∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏—è:</strong> r = {overall_trust_crypto_corr:.3f}</p>
                    <p><strong>–ü–æ—á–µ–º—É —á–∞—Å—Ç–∏—á–Ω–æ:</strong></p>
                    <ul>
                        <li>‚úÖ <strong>–ë–µ–ª–∞—Ä—É—Å—å:</strong> –ù–∏–∑–∫–æ–µ –¥–æ–≤–µ—Ä–∏–µ (15%), –Ω–æ –ø–æ–¥–∞–≤–ª–µ–Ω–Ω–∞—è –∞–¥–æ–ø—Ü–∏—è</li>
                        <li>‚úÖ <strong>–£–∫—Ä–∞–∏–Ω–∞:</strong> –°–Ω–∏–∂–µ–Ω–∏–µ –¥–æ–≤–µ—Ä–∏—è ‚Üí —Ä–æ—Å—Ç –∞–¥–æ–ø—Ü–∏–∏</li>
                        <li>‚ùå <strong>–®–≤–µ—Ü–∏—è/–ù–æ—Ä–≤–µ–≥–∏—è:</strong> –í—ã—Å–æ–∫–æ–µ –¥–æ–≤–µ—Ä–∏–µ, –Ω–æ —Ä–∞—Å—Ç—É—â–∞—è –∞–¥–æ–ø—Ü–∏—è (—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏)</li>
                        <li>üìä <strong>–í—ã–≤–æ–¥:</strong> –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è</li>
                    </ul>
                </div>
            </div>

            <div class="definition">
                <h2>üî¨ –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤</h2>
                
                <h3>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ü–∏—Ä—Å–æ–Ω–∞:</h3>
                <div class="formula">
                    r = Œ£[(Xi - XÃÑ)(Yi - »≤)] / ‚àö[Œ£(Xi - XÃÑ)¬≤ √ó Œ£(Yi - »≤)¬≤]
                </div>
                
                <h3>–†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑:</h3>
                <div class="formula">
                    Y = a + bX + Œµ<br>
                    –≥–¥–µ Y = –∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏—è, X = –Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, Œµ = –æ—à–∏–±–∫–∞
                </div>
                
                <h3>–ö–ª–∞—Å—Ç–µ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑:</h3>
                <p>–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º:</p>
                <ul>
                    <li><strong>–ö–ª–∞—Å—Ç–µ—Ä 0:</strong> –î–æ–≤–µ—Ä–∏–µ ‚â•60%, –ê–¥–æ–ø—Ü–∏—è ‚â§5% (–í—ã—Å–æ–∫–æ–µ –¥–æ–≤–µ—Ä–∏–µ)</li>
                    <li><strong>–ö–ª–∞—Å—Ç–µ—Ä 1:</strong> 30% < –î–æ–≤–µ—Ä–∏–µ < 60% (–£–º–µ—Ä–µ–Ω–Ω–æ–µ –¥–æ–≤–µ—Ä–∏–µ)</li>
                    <li><strong>–ö–ª–∞—Å—Ç–µ—Ä 2:</strong> –î–æ–≤–µ—Ä–∏–µ ‚â§30%, –ê–¥–æ–ø—Ü–∏—è ‚â•5% (–ù–∏–∑–∫–æ–µ –¥–æ–≤–µ—Ä–∏–µ)</li>
                </ul>
                
                <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å:</h3>
                <p>–ü—Ä–∏ n=96, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ |r| > 0.195 (p < 0.05)</p>
                <p><strong>–í—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã!</strong></p>
            </div>
        </div>
    </body>
    </html>
    """
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ HTML —Ñ–∞–π–ª–∞
    hypothesis_path = os.path.join(base, 'hypothesis_analysis.html')
    with open(hypothesis_path, 'w', encoding='utf-8') as f:
        f.write(hypothesis_html)
    
    print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –≥–∏–ø–æ—Ç–µ–∑ —Å–æ–∑–¥–∞–Ω: {hypothesis_path}")
    return crisis_corr, stable_corr, transition_corr

def create_extended_data_2010_2025() -> Tuple[pd.DataFrame, Dict[str, Any]]:
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å 2010 –≥–æ–¥–∞‚Ä¶")
    years = list(range(2010, 2026))
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º —Å—Ç—Ä–∞–Ω–∞–º
    countries_data: Dict[str, Dict[str, Any]] = {
        'Ukraine': {
            'name_ru': '–£–∫—Ä–∞–∏–Ω–∞',
            'currency': 'UAH',
            'main_crypto': ['Bitcoin', 'USDT', 'Ethereum'],
            'crypto_preference': 'Stablecoins (–∑–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–≤–∞–ª—å–≤–∞—Ü–∏–∏)',
            
            'gdp_per_capita': [3577, 3855, 3927, 3014, 2115, 2640, 2656, 3095, 3659, 3425, 3752, 4828, 4576, 5181, 5500, 5800],
            'inflation': [9.4, 0.6, -0.3, 12.1, 48.7, 13.9, 14.4, 10.9, 7.9, 2.7, 10.0, 26.6, 12.9, 13.4, 15.1, 15.9],
            'crypto_adoption': [0.0, 0.1, 0.2, 0.5, 1.8, 3.2, 4.1, 4.5, 4.8, 5.2, 9.5, 15.2, 14.1, 12.8, 11.2, 10.5],
            'gdp_growth': [4.1, 0.2, 0.0, -6.6, -9.8, 2.4, 2.5, 3.4, 3.2, -4.0, 3.4, -29.1, 5.3, 4.0, 3.5, 3.8],
            'currency_volatility': [1.8, 2.1, 3.2, 15.8, 52.3, 25.4, 18.2, 12.1, 8.9, 8.5, 15.2, 45.8, 38.2, 25.1, 20.5, 18.2],
            'unemployment': [7.4, 7.5, 7.2, 9.3, 9.1, 9.4, 9.6, 8.8, 8.6, 8.5, 9.9, 18.6, 17.2, 16.8, 15.5, 14.8],
            'exports': [51.4, 68.8, 63.3, 53.9, 38.1, 36.4, 43.3, 47.3, 49.3, 50.1, 49.2, 44.1, 57.5, 62.8, 68.2, 72.1],
            'imports': [60.7, 84.7, 76.9, 54.4, 37.5, 39.2, 43.9, 49.6, 57.1, 60.8, 54.4, 42.2, 55.9, 61.4, 67.8, 71.5],
            'government_debt': [40.0, 36.6, 40.1, 70.3, 79.4, 81.0, 81.2, 71.8, 60.9, 50.3, 60.8, 78.8, 84.2, 88.5, 92.1, 95.2],
            'government_trust': [40, 35, 32, 25, 18, 15, 20, 22, 24, 25, 23, 18, 20, 22, 25, 27],
            'corruption_index': [26, 26, 25, 26, 27, 29, 30, 32, 32, 33, 33, 32, 33, 34, 33, 35],
            'political_stability': [-0.5, -0.8, -1.2, -2.5, -2.3, -1.8, -1.5, -1.2, -1.8, -2.1, -2.0, -2.8, -2.5, -2.2, -2.1, -2.0],
            
            'population': 41.2,
            'internet_penetration': 71,
            'strategy_type': '–ó–ê–©–ò–¢–ù–ò–ö',
            'crypto_drivers': '–ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–≤–∞–ª—å–≤–∞—Ü–∏–∏ –≥—Ä–∏–≤–Ω—ã, –æ–±—Ö–æ–¥ —Å–∞–Ω–∫—Ü–∏–π, –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã'
        },
        
        'Poland': {
            'name_ru': '–ü–æ–ª—å—à–∞',
            'currency': 'PLN',
            'main_crypto': ['Bitcoin', 'Ethereum', 'Polish tokens'],
            'crypto_preference': 'Bitcoin (–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏)',
            
            'gdp_per_capita': [12294, 12648, 13432, 14342, 12495, 12372, 12414, 13823, 15694, 15694, 15694, 17640, 18920, 20150, 21380, 22100],
            'inflation': [2.6, 3.7, 0.9, -0.9, -0.6, 2.0, 1.6, 3.4, 5.1, 3.4, 5.1, 15.3, 11.3, 6.2, 3.9, 3.7],
            'crypto_adoption': [0.1, 0.3, 0.5, 0.8, 1.1, 1.5, 1.8, 2.1, 2.4, 2.7, 3.2, 8.5, 12.2, 15.8, 18.2, 19.1],
            'gdp_growth': [3.6, 1.6, 1.4, 3.3, 3.8, 3.1, 5.1, 4.9, 5.4, -2.5, 6.9, 3.1, 2.8, 3.2, 3.0, 2.8],
            'currency_volatility': [2.8, 3.2, 4.1, 8.7, 6.8, 5.2, 4.8, 6.2, 8.1, 6.2, 8.1, 11.4, 9.8, 8.5, 7.2, 6.8],
            'unemployment': [9.7, 10.1, 9.0, 7.5, 6.2, 4.9, 3.8, 3.4, 3.3, 3.2, 2.9, 2.9, 3.1, 3.5, 3.8, 4.0],
            'exports': [159.8, 184.5, 203.0, 218.2, 195.7, 195.1, 221.8, 249.8, 262.3, 269.4, 314.4, 390.7, 418.2, 445.8, 472.1, 495.2],
            'imports': [173.7, 188.4, 203.5, 215.0, 188.4, 188.6, 202.0, 239.9, 271.0, 254.8, 310.3, 378.2, 405.6, 432.1, 458.9, 481.8],
            'government_debt': [54.8, 55.6, 57.0, 50.4, 51.3, 54.2, 54.1, 48.9, 57.1, 57.4, 49.6, 49.6, 49.4, 49.8, 50.2, 50.8],
            'government_trust': [44, 42, 40, 38, 35, 36, 37, 38, 40, 38, 40, 35, 36, 37, 38, 39],
            'corruption_index': [53, 58, 60, 61, 62, 62, 60, 45, 45, 45, 45, 45, 56, 55, 45, 47],
            'political_stability': [0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, 0.2, 0.3, 0.2, 0.3, 0.1, 0.2, 0.2, 0.2, 0.3],
            
            'population': 37.7,
            'internet_penetration': 85,
            'strategy_type': '–î–ò–í–ï–†–°–ò–§–ò–ö–ê–¢–û–†',
            'crypto_drivers': '–î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è, —Ö–µ–¥–∂ –ø—Ä–æ—Ç–∏–≤ –∑–ª–æ—Ç–æ–≥–æ, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏'
        },
        
        'Czech': {
            'name_ru': '–ß–µ—Ö–∏—è',
            'currency': 'CZK',
            'main_crypto': ['Bitcoin', 'Ethereum', 'Local tokens'],
            'crypto_preference': 'Bitcoin (–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏)',
            
            'gdp_per_capita': [19420, 20294, 20571, 19582, 18267, 18858, 20152, 23111, 26821, 26821, 26821, 28450, 29780, 31200, 32650, 34100],
            'inflation': [1.5, 3.3, 1.4, 0.4, 0.3, 0.7, 2.5, 3.2, 3.8, 3.2, 3.8, 15.1, 10.7, 2.7, 2.0, 1.8],
            'crypto_adoption': [0.1, 0.2, 0.4, 0.7, 1.0, 1.3, 1.6, 1.8, 2.1, 2.4, 2.8, 7.2, 9.5, 11.8, 13.2, 14.1],
            'gdp_growth': [2.3, -0.8, -0.5, 2.7, 5.4, 2.5, 2.2, 3.6, 2.8, -5.8, 3.3, 2.4, 2.1, 2.5, 2.8, 3.0],
            'currency_volatility': [2.5, 2.8, 3.5, 7.2, 5.9, 4.1, 3.8, 5.8, 7.9, 5.8, 7.9, 12.7, 10.1, 8.8, 7.5, 7.0],
            'unemployment': [7.3, 7.0, 6.1, 5.1, 4.0, 2.9, 2.4, 2.2, 2.8, 2.6, 2.8, 2.4, 2.6, 3.0, 3.2, 3.4],
            'exports': [132.1, 162.0, 161.8, 174.7, 156.9, 143.4, 174.3, 192.9, 215.5, 216.8, 243.5, 267.8, 285.4, 302.1, 318.9, 335.2],
            'imports': [125.7, 143.1, 148.1, 156.0, 140.2, 134.2, 154.8, 177.6, 201.4, 198.7, 227.8, 251.2, 268.9, 285.6, 302.4, 318.8],
            'government_debt': [38.4, 44.5, 42.6, 42.2, 36.8, 36.8, 32.6, 30.0, 38.1, 37.7, 41.9, 41.0, 43.8, 44.2, 44.6, 45.0],
            'government_trust': [47, 45, 43, 41, 39, 40, 41, 42, 44, 42, 44, 40, 41, 42, 42, 43],
            'corruption_index': [46, 49, 48, 51, 56, 55, 55, 56, 56, 56, 56, 56, 56, 56, 56, 57],
            'political_stability': [1.0, 0.9, 0.8, 0.7, 0.8, 0.9, 1.0, 0.8, 0.9, 0.8, 0.9, 0.7, 0.8, 0.8, 0.8, 0.9],
            
            'population': 10.7,
            'internet_penetration': 88,
            'strategy_type': '–î–ò–í–ï–†–°–ò–§–ò–ö–ê–¢–û–†',
            'crypto_drivers': '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏, –∑–∞—â–∏—Ç–∞ –æ—Ç –∏–Ω—Ñ–ª—è—Ü–∏–∏, –µ–≤—Ä–æ–ø–µ–π—Å–∫–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è'
        },
        
        'Sweden': {
            'name_ru': '–®–≤–µ—Ü–∏—è',
            'currency': 'SEK',
            'main_crypto': ['Bitcoin', 'Ethereum', 'Green crypto'],
            'crypto_preference': 'Ethereum (DeFi –∏ —ç–∫–æ–ª–æ–≥–∏—è)',
            
            'gdp_per_capita': [49803, 56956, 60430, 58491, 51165, 51608, 53442, 51648, 54608, 54608, 54608, 56890, 58420, 60150, 61980, 63850],
            'inflation': [1.9, 0.9, 0.4, -0.2, 0.0, 1.0, 1.8, 0.5, 2.2, 0.5, 2.2, 8.1, 5.9, 2.2, 2.0, 1.8],
            'crypto_adoption': [0.3, 0.5, 0.8, 1.2, 1.6, 2.0, 2.3, 2.6, 3.0, 3.4, 3.8, 5.2, 6.1, 6.8, 7.2, 7.5],
            'gdp_growth': [6.0, -0.3, 1.3, 2.7, 4.5, 2.1, 2.6, 1.2, 2.6, -2.8, 4.8, 1.9, 1.2, 2.0, 2.2, 2.4],
            'currency_volatility': [1.8, 2.1, 2.8, 5.2, 4.1, 3.2, 2.9, 4.2, 6.1, 4.2, 6.1, 8.3, 7.1, 6.5, 6.0, 5.5],
            'unemployment': [8.6, 8.0, 7.9, 7.4, 6.9, 6.9, 6.9, 6.8, 8.3, 8.3, 8.7, 7.5, 7.8, 8.1, 8.4, 8.6],
            'exports': [158.4, 184.8, 181.5, 165.6, 152.0, 140.2, 151.4, 151.0, 165.6, 176.5, 193.8, 208.7, 221.4, 234.8, 248.5, 262.1],
            'imports': [148.8, 166.8, 159.7, 148.8, 138.2, 131.8, 142.1, 142.8, 153.2, 167.1, 181.4, 195.2, 207.8, 220.9, 234.3, 247.8],
            'government_debt': [39.4, 38.2, 40.6, 45.0, 43.9, 42.8, 41.0, 35.1, 39.9, 39.8, 35.3, 35.4, 32.9, 31.5, 30.2, 29.0],
            'government_trust': [80, 78, 76, 74, 72, 73, 74, 75, 77, 75, 77, 73, 74, 75, 75, 76],
            'corruption_index': [92, 88, 89, 87, 87, 88, 85, 83, 83, 83, 83, 83, 83, 83, 83, 84],
            'political_stability': [1.5, 1.4, 1.3, 1.2, 1.3, 1.4, 1.5, 1.3, 1.4, 1.3, 1.4, 1.2, 1.3, 1.3, 1.3, 1.4],
            
            'population': 10.5,
            'internet_penetration': 97,
            'strategy_type': '–ò–ù–ù–û–í–ê–¢–û–†',
            'crypto_drivers': '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏, —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã, —Ü–∏—Ñ—Ä–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞'
        },
        
        'Norway': {
            'name_ru': '–ù–æ—Ä–≤–µ–≥–∏—è',
            'currency': 'NOK',
            'main_crypto': ['Bitcoin', 'Ethereum', 'Green mining'],
            'crypto_preference': 'Bitcoin (–∑–µ–ª–µ–Ω—ã–π –º–∞–π–Ω–∏–Ω–≥)',
            
            'gdp_per_capita': [87648, 73450, 75420, 74356, 60139, 59330, 70590, 67294, 75420, 75420, 75420, 78650, 81200, 83750, 86300, 88950],
            'inflation': [2.4, 0.7, 2.0, 2.2, 2.2, 3.6, 1.9, 1.3, 3.5, 1.3, 3.5, 5.9, 5.5, 3.0, 2.8, 2.5],
            'crypto_adoption': [0.2, 0.3, 0.6, 1.0, 1.3, 1.6, 1.9, 2.2, 2.6, 3.0, 3.4, 4.8, 5.5, 6.1, 6.5, 6.8],
            'gdp_growth': [0.7, 2.7, 1.0, 2.0, 1.6, 1.2, 1.1, 1.9, 2.9, -0.7, 5.3, 2.8, 1.5, 2.1, 2.0, 2.2],
            'currency_volatility': [1.5, 1.8, 2.5, 4.8, 3.9, 2.8, 2.5, 3.8, 5.2, 3.8, 5.2, 7.1, 6.2, 5.8, 5.5, 5.2],
            'unemployment': [3.6, 3.2, 3.5, 3.5, 4.4, 4.7, 4.7, 4.2, 5.0, 5.0, 4.4, 3.2, 3.5, 3.8, 4.0, 4.2],
            'exports': [130.7, 162.0, 153.8, 144.2, 103.4, 88.9, 102.1, 101.8, 122.2, 164.0, 183.9, 231.2, 195.4, 208.7, 222.1, 235.8],
            'imports': [77.3, 89.1, 90.3, 87.9, 75.9, 68.8, 75.2, 74.5, 82.1, 91.8, 102.4, 118.7, 108.9, 116.3, 123.8, 131.5],
            'government_debt': [43.6, 29.0, 27.4, 27.7, 27.9, 33.2, 36.4, 36.3, 39.7, 67.1, 45.5, 41.7, 38.2, 35.8, 33.5, 31.2],
            'government_trust': [74, 72, 70, 68, 66, 67, 68, 68, 70, 68, 70, 66, 67, 68, 68, 69],
            'corruption_index': [89, 85, 86, 87, 87, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 86],
            'political_stability': [1.6, 1.5, 1.4, 1.3, 1.4, 1.5, 1.6, 1.4, 1.5, 1.4, 1.5, 1.3, 1.4, 1.4, 1.4, 1.5],
            
            'population': 5.4,
            'internet_penetration': 98,
            'strategy_type': '–ò–ù–ù–û–í–ê–¢–û–†',
            'crypto_drivers': '–î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ—Ñ—Ç—è–Ω–æ–≥–æ —Ñ–æ–Ω–¥–∞, –∑–µ–ª–µ–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –∏–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏'
        },
        
        'Belarus': {
            'name_ru': '–ë–µ–ª–∞—Ä—É—Å—å',
            'currency': 'BYN',
            'main_crypto': ['Bitcoin', 'USDT', 'Local mining'],
            'crypto_preference': 'USDT (–æ–±—Ö–æ–¥ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)',
            
            'gdp_per_capita': [5819, 7031, 7973, 8039, 5762, 5143, 5762, 6330, 6890, 6330, 6890, 6450, 6200, 6350, 6500, 6650],
            'inflation': [7.7, 59.2, 18.3, 18.1, 11.8, 10.6, 7.4, 5.5, 9.5, 5.5, 9.5, 12.8, 10.3, 8.5, 7.2, 6.8],
            'crypto_adoption': [0.0, 0.1, 0.1, 0.2, 0.3, 0.4, 0.4, 0.5, 0.6, 0.7, 0.8, 1.2, 1.0, 0.9, 0.8, 0.9],
            'gdp_growth': [7.7, 1.7, 1.0, 1.7, -3.8, -2.5, -0.2, 2.5, 1.2, -0.9, 2.3, -0.9, -1.5, 0.5, 1.0, 1.2],
            'currency_volatility': [6.8, 8.2, 12.5, 18.7, 15.2, 12.8, 10.5, 12.1, 18.5, 12.1, 18.5, 15.2, 13.8, 12.0, 10.5, 9.8],
            'unemployment': [0.7, 0.5, 0.5, 0.5, 1.0, 1.0, 0.8, 4.8, 4.2, 4.2, 3.9, 4.8, 5.2, 5.5, 5.8, 6.0],
            'exports': [25.3, 46.1, 36.0, 31.2, 26.7, 23.5, 28.3, 33.0, 33.0, 28.8, 39.5, 41.8, 43.2, 44.7, 46.2, 47.8],
            'imports': [34.9, 46.4, 43.0, 40.5, 34.2, 30.3, 32.9, 38.8, 42.5, 35.4, 42.8, 44.2, 45.7, 47.3, 48.9, 50.5],
            'government_debt': [14.6, 31.5, 34.0, 34.7, 48.5, 53.4, 53.5, 47.5, 39.4, 46.7, 35.3, 46.9, 48.2, 49.5, 50.8, 52.1],
            'government_trust': [30, 25, 22, 18, 15, 12, 15, 15, 18, 15, 18, 12, 13, 14, 15, 16],
            'corruption_index': [25, 31, 29, 31, 32, 40, 44, 47, 47, 47, 47, 47, 47, 47, 47, 48],
            'political_stability': [-0.5, -0.8, -1.0, -1.2, -1.5, -1.8, -2.0, -1.8, -1.5, -1.8, -1.5, -2.2, -2.0, -1.9, -1.8, -1.7],
            
            'population': 9.4,
            'internet_penetration': 79,
            'strategy_type': '–ü–û–î–ê–í–õ–ï–ù–ù–´–ô',
            'crypto_drivers': '–û–±—Ö–æ–¥ —Å–∞–Ω–∫—Ü–∏–π, IT-—ç–∫—Å–ø–æ—Ä—Ç, –º–∞–π–Ω–∏–Ω–≥, –∑–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–≤–∞–ª—å–≤–∞—Ü–∏–∏'
        }
    }

    # –î–û–ë–ê–í–õ–Ø–ï–ú HDI –¥–∞–Ω–Ω—ã–µ –ü–û–°–õ–ï —Å–æ–∑–¥–∞–Ω–∏—è countries_data
    countries_data = add_hdi_data(countries_data)

    rows = []
    for code, info in countries_data.items():
        for i, yr in enumerate(years):
            rows.append({
                "Year": int(yr),
                "Country": code,
                "Country_RU": info["name_ru"],
                "Currency": info["currency"],
                "GDP_Per_Capita": int(info["gdp_per_capita"][i]),
                "Inflation": round(float(info["inflation"][i]), 2),
                "Crypto_Adoption": round(float(info["crypto_adoption"][i]), 2),
                "GDP_Growth": round(float(info["gdp_growth"][i]), 2),
                "Currency_Volatility": round(float(info["currency_volatility"][i]), 2),
                "Unemployment": round(float(info["unemployment"][i]), 2),
                "Exports": round(float(info["exports"][i]), 1),
                "Imports": round(float(info["imports"][i]), 1),
                "Government_Debt": round(float(info["government_debt"][i]), 1),
                "Government_Trust": int(info["government_trust"][i]),
                "Corruption_Index": int(info["corruption_index"][i]),
                "Political_Stability": round(float(info["political_stability"][i]), 2),
                "HDI": round(float(info["hdi"][i]), 3),  # ‚Üê –î–û–ë–ê–í–õ–Ø–ï–ú HDI
                "Population": round(float(info["population"]), 1),
                "Internet_Penetration": int(info["internet_penetration"]),
                "Strategy_Type": info["strategy_type"],
                "Main_Crypto": ", ".join(info["main_crypto"]),
                "Crypto_Preference": info["crypto_preference"],
                "Crypto_Drivers": info["crypto_drivers"],
            })

    df = optimize_int_columns(pd.DataFrame(rows))
    df['Year'] = df['Year'].astype('int32')
    
    print(f"‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã: {len(df)} –∑–∞–ø–∏—Å–µ–π (2010-2025)")
    return df, countries_data
def create_extended_correlation_analysis(df, countries, base):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π: BTC vs Trust/HDI + –ø—Ä–æ—Å—Ç–∞—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è"""
    print("üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑...")
    
    # 1. –ö–û–†–†–ï–õ–Ø–¶–ò–ò BTC vs TRUST/HDI
    correlations_analysis = {}
    
    # –û–±—â–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
    btc_trust_corr = df['Government_Trust'].corr(df['Crypto_Adoption'])
    btc_hdi_corr = df['HDI'].corr(df['Crypto_Adoption'])
    btc_corruption_corr = df['Corruption_Index'].corr(df['Crypto_Adoption'])
    btc_stability_corr = df['Political_Stability'].corr(df['Crypto_Adoption'])
    
    correlations_analysis['–û–±—â–∏–µ'] = {
        'BTC_vs_Trust': round(btc_trust_corr, 3),
        'BTC_vs_HDI': round(btc_hdi_corr, 3),
        'BTC_vs_Corruption': round(btc_corruption_corr, 3),
        'BTC_vs_Political_Stability': round(btc_stability_corr, 3)
    }
    
    # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
    country_detailed_corr = {}
    for country_code, country_info in countries.items():
        country_data = df[df['Country'] == country_code]
        country_name = country_info['name_ru']
        
        country_detailed_corr[country_name] = {
            'Trust_BTC': round(country_data['Government_Trust'].corr(country_data['Crypto_Adoption']), 3),
            'HDI_BTC': round(country_data['HDI'].corr(country_data['Crypto_Adoption']), 3),
            'Corruption_BTC': round(country_data['Corruption_Index'].corr(country_data['Crypto_Adoption']), 3),
            'Stability_BTC': round(country_data['Political_Stability'].corr(country_data['Crypto_Adoption']), 3)
        }
    
    # 2. –ü–†–û–°–¢–ê–Ø –ö–õ–ê–°–¢–ï–†–ò–ó–ê–¶–ò–Ø (–±–µ–∑ sklearn)
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ (—Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∞–º)
    cluster_data = []
    country_names = []
    
    for country_code, country_info in countries.items():
        country_data = df[df['Country'] == country_code]
        country_names.append(country_info['name_ru'])
        
        cluster_data.append({
            '–°—Ç—Ä–∞–Ω–∞': country_info['name_ru'],
            '–î–æ–≤–µ—Ä–∏–µ_—Å—Ä–µ–¥–Ω–µ–µ': round(country_data['Government_Trust'].mean(), 1),
            'HDI_—Å—Ä–µ–¥–Ω–µ–µ': round(country_data['HDI'].mean(), 3),
            'BTC_–∞–¥–æ–ø—Ü–∏—è_—Å—Ä–µ–¥–Ω—è—è': round(country_data['Crypto_Adoption'].mean(), 1),
            '–ö–æ—Ä—Ä—É–ø—Ü–∏—è_—Å—Ä–µ–¥–Ω—è—è': round(country_data['Corruption_Index'].mean(), 1),
            '–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å_—Å—Ä–µ–¥–Ω—è—è': round(country_data['Political_Stability'].mean(), 2)
        })
    
    # –ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –¥–æ–≤–µ—Ä–∏—é –∏ BTC
    cluster_df = pd.DataFrame(cluster_data)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Ç–µ—Ä—ã –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
    def assign_cluster(row):
        trust = row['–î–æ–≤–µ—Ä–∏–µ_—Å—Ä–µ–¥–Ω–µ–µ']
        btc = row['BTC_–∞–¥–æ–ø—Ü–∏—è_—Å—Ä–µ–¥–Ω—è—è']
        
        if trust >= 60 and btc <= 5:
            return 0  # –í—ã—Å–æ–∫–æ–µ –¥–æ–≤–µ—Ä–∏–µ, –Ω–∏–∑–∫–∞—è –∞–¥–æ–ø—Ü–∏—è
        elif trust <= 30 and btc >= 5:
            return 2  # –ù–∏–∑–∫–æ–µ –¥–æ–≤–µ—Ä–∏–µ, –≤—ã—Å–æ–∫–∞—è –∞–¥–æ–ø—Ü–∏—è
        else:
            return 1  # –°—Ä–µ–¥–Ω–µ–µ –¥–æ–≤–µ—Ä–∏–µ, —É–º–µ—Ä–µ–Ω–Ω–∞—è –∞–¥–æ–ø—Ü–∏—è
    
    cluster_df['–ö–ª–∞—Å—Ç–µ—Ä'] = cluster_df.apply(assign_cluster, axis=1)
    
    # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
    cluster_interpretation = {
        0: "–í—ã—Å–æ–∫–æ–µ –¥–æ–≤–µ—Ä–∏–µ, –Ω–∏–∑–∫–∞—è –∞–¥–æ–ø—Ü–∏—è BTC",
        1: "–°—Ä–µ–¥–Ω–µ–µ –¥–æ–≤–µ—Ä–∏–µ, —É–º–µ—Ä–µ–Ω–Ω–∞—è –∞–¥–æ–ø—Ü–∏—è BTC", 
        2: "–ù–∏–∑–∫–æ–µ –¥–æ–≤–µ—Ä–∏–µ, –≤—ã—Å–æ–∫–∞—è –∞–¥–æ–ø—Ü–∏—è BTC"
    }
    
    # 3. –ü–†–û–°–¢–ê–Ø –†–ï–ì–†–ï–°–°–ò–Ø Trust ‚Üí BTC
    from scipy import stats
    
    # –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è: Trust ‚Üí BTC
    slope_trust, intercept_trust, r_value_trust, p_value_trust, std_err_trust = stats.linregress(
        df['Government_Trust'], df['Crypto_Adoption']
    )
    
    # –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è: HDI ‚Üí BTC  
    slope_hdi, intercept_hdi, r_value_hdi, p_value_hdi, std_err_hdi = stats.linregress(
        df['HDI'], df['Crypto_Adoption']
    )
    
    regression_results = {
        'Trust_to_BTC': {
            'slope': round(slope_trust, 4),
            'intercept': round(intercept_trust, 4),
            'r_squared': round(r_value_trust**2, 3),
            'p_value': round(p_value_trust, 4)
        },
        'HDI_to_BTC': {
            'slope': round(slope_hdi, 4),
            'intercept': round(intercept_hdi, 4),
            'r_squared': round(r_value_hdi**2, 3),
            'p_value': round(p_value_hdi, 4)
        }
    }
    
    # 4. –°–û–ó–î–ê–ù–ò–ï –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–• –ì–†–ê–§–ò–ö–û–í
    
    # –ì—Ä–∞—Ñ–∏–∫ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
    fig_cluster = go.Figure()
    
    colors_cluster = ['#FF6B6B', '#4ECDC4', '#45B7D1']
    
    for i in range(3):
        cluster_countries = cluster_df[cluster_df['–ö–ª–∞—Å—Ç–µ—Ä'] == i]
        if len(cluster_countries) > 0:
            fig_cluster.add_trace(go.Scatter(
                x=cluster_countries['–î–æ–≤–µ—Ä–∏–µ_—Å—Ä–µ–¥–Ω–µ–µ'],
                y=cluster_countries['BTC_–∞–¥–æ–ø—Ü–∏—è_—Å—Ä–µ–¥–Ω—è—è'],
                mode='markers+text',
                name=f'–ö–ª–∞—Å—Ç–µ—Ä {i}: {cluster_interpretation[i]}',
                text=cluster_countries['–°—Ç—Ä–∞–Ω–∞'],
                textposition="top center",
                marker=dict(
                    size=cluster_countries['HDI_—Å—Ä–µ–¥–Ω–µ–µ'] * 50,
                    color=colors_cluster[i],
                    opacity=0.7,
                    line=dict(width=2, color='white')
                ),
                hovertemplate='<b>%{text}</b><br>' +
                             '–î–æ–≤–µ—Ä–∏–µ: %{x:.1f}%<br>' +
                             'BTC –∞–¥–æ–ø—Ü–∏—è: %{y:.1f}%<br>' +
                             'HDI: %{customdata:.3f}<br>' +
                             '<extra></extra>',
                customdata=cluster_countries['HDI_—Å—Ä–µ–¥–Ω–µ–µ']
            ))
    
    fig_cluster.update_layout(
        title='–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω –ø–æ –¥–æ–≤–µ—Ä–∏—é –∏ BTC –∞–¥–æ–ø—Ü–∏–∏ (—Ä–∞–∑–º–µ—Ä = HDI)',
        xaxis_title='–°—Ä–µ–¥–Ω–µ–µ –¥–æ–≤–µ—Ä–∏–µ –∫ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É (%)',
        yaxis_title='–°—Ä–µ–¥–Ω—è—è BTC –∞–¥–æ–ø—Ü–∏—è (%)',
        template='plotly_white',
        width=1000,
        height=600
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ Trust ‚Üí BTC
    fig_regression = go.Figure()
    
    # –¢–æ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    fig_regression.add_trace(go.Scatter(
        x=df['Government_Trust'],
        y=df['Crypto_Adoption'],
        mode='markers',
        name='–î–∞–Ω–Ω—ã–µ',
        marker=dict(size=8, opacity=0.6),
        hovertemplate='–î–æ–≤–µ—Ä–∏–µ: %{x}%<br>BTC: %{y:.1f}%<extra></extra>'
    ))
    
    # –õ–∏–Ω–∏—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
    x_reg = [df['Government_Trust'].min(), df['Government_Trust'].max()]
    y_reg = [slope_trust * x + intercept_trust for x in x_reg]
    
    fig_regression.add_trace(go.Scatter(
        x=x_reg,
        y=y_reg,
        mode='lines',
        name=f'–†–µ–≥—Ä–µ—Å—Å–∏—è (R¬≤ = {r_value_trust**2:.3f})',
        line=dict(color='red', width=3)
    ))
    
    fig_regression.update_layout(
        title=f'–†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑: –î–æ–≤–µ—Ä–∏–µ ‚Üí BTC –∞–¥–æ–ø—Ü–∏—è<br>–£—Ä–∞–≤–Ω–µ–Ω–∏–µ: BTC = {slope_trust:.4f} √ó Trust + {intercept_trust:.4f}',
        xaxis_title='–î–æ–≤–µ—Ä–∏–µ –∫ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É (%)',
        yaxis_title='BTC –∞–¥–æ–ø—Ü–∏—è (%)',
        template='plotly_white',
        width=1000,
        height=600
    )
    
    # 5. –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    grafiki_path = os.path.join(base, 'grafiki')
    fig_cluster.write_html(os.path.join(grafiki_path, 'cluster_analysis.html'))
    fig_regression.write_html(os.path.join(grafiki_path, 'regression_trust_btc.html'))
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Excel
    extended_analysis_path = os.path.join(base, 'otchety', 'extended_correlation_analysis.xlsx')
    with pd.ExcelWriter(extended_analysis_path, engine='openpyxl') as writer:
        
        # –û–±—â–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        general_corr_df = pd.DataFrame(list(correlations_analysis['–û–±—â–∏–µ'].items()), 
                                      columns=['–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å', '–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è_—Å_BTC'])
        general_corr_df.to_excel(writer, sheet_name='–û–±—â–∏–µ_–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏', index=False)
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
        detailed_df = pd.DataFrame(country_detailed_corr).T
        detailed_df.reset_index(inplace=True)
        detailed_df.rename(columns={'index': '–°—Ç—Ä–∞–Ω–∞'}, inplace=True)
        detailed_df.to_excel(writer, sheet_name='–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏_–ø–æ_—Å—Ç—Ä–∞–Ω–∞–º', index=False)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
        cluster_df.to_excel(writer, sheet_name='–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è', index=False)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
        regression_df = pd.DataFrame(regression_results).T
        regression_df.reset_index(inplace=True)
        regression_df.rename(columns={'index': '–ú–æ–¥–µ–ª—å'}, inplace=True)
        regression_df.to_excel(writer, sheet_name='–†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–π_–∞–Ω–∞–ª–∏–∑', index=False)
    
    print("‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print(f"   üìä BTC vs Trust: {btc_trust_corr:.3f}")
    print(f"   üìä BTC vs HDI: {btc_hdi_corr:.3f}")
    print(f"   üéØ –ö–ª–∞—Å—Ç–µ—Ä—ã: {len(cluster_df['–ö–ª–∞—Å—Ç–µ—Ä'].unique())} –≥—Ä—É–ø–ø—ã —Å—Ç—Ä–∞–Ω")
    print(f"   üìà R¬≤ (Trust‚ÜíBTC): {r_value_trust**2:.3f}")
    
    return correlations_analysis, cluster_df, regression_results

def create_country_analysis_pages(df: pd.DataFrame, countries: Dict[str, Any], base: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–µ —Å HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ –∏ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏"""
    print("üåç –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º...")
    
    strany_path = os.path.join(base, 'strany_analiz')
    os.makedirs(strany_path, exist_ok=True)
    
    # –¶–≤–µ—Ç–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω
    colors = {'Ukraine': '#FF6B6B', 'Poland': '#4ECDC4', 'Czech': '#45B7D1', 
              'Sweden': '#96CEB4', 'Norway': '#FFEAA7', 'Belarus': '#DDA0DD'}
    
    for country_code, country_info in countries.items():
        country_name = country_info['name_ru']
        country_data = df[df['Country'] == country_code].copy()
        
        print(f"   üìà –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {country_name}...")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å—Ç—Ä–∞–Ω—ã
        country_folder = os.path.join(strany_path, country_code.lower())
        os.makedirs(country_folder, exist_ok=True)
        
        # 1. –°–û–ó–î–ê–ù–ò–ï –ì–†–ê–§–ò–ö–û–í –î–õ–Ø –°–¢–†–ê–ù–´
        
        # –ì—Ä–∞—Ñ–∏–∫ 1: –î–∏–Ω–∞–º–∏–∫–∞ –∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏–∏
        plt.figure(figsize=(12, 8))
        plt.plot(country_data['Year'], country_data['Crypto_Adoption'], 
                marker='o', linewidth=3, color=colors[country_code], markersize=8)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
        if country_code == 'Ukraine':
            plt.axvline(x=2014, color='red', linestyle='--', alpha=0.7)
            plt.text(2014.1, country_data['Crypto_Adoption'].max()*0.8, '–ú–∞–π–¥–∞–Ω', fontsize=10)
            plt.axvline(x=2022, color='red', linestyle='--', alpha=0.7)
            plt.text(2022.1, country_data['Crypto_Adoption'].max()*0.9, '–í–æ–π–Ω–∞', fontsize=10)
        elif country_code == 'Poland':
            plt.axvline(x=2004, color='blue', linestyle='--', alpha=0.7)
            plt.text(2004.1, country_data['Crypto_Adoption'].max()*0.8, '–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –ï–°', fontsize=10)
        
        plt.title(f'–î–∏–Ω–∞–º–∏–∫–∞ –∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏–∏: {country_name} (2010-2025)', fontsize=16, fontweight='bold')
        plt.xlabel('–ì–æ–¥', fontsize=12)
        plt.ylabel('–ö—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏—è (%)', fontsize=12)
        plt.grid(True, alpha=0.3)
        plt.tight_layout()
        plt.savefig(os.path.join(country_folder, f'{country_code.lower()}_crypto_trend.png'), dpi=300, bbox_inches='tight')
        plt.close()
        
        # –ì—Ä–∞—Ñ–∏–∫ 2: –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –∏–Ω—Ñ–ª—è—Ü–∏—è-–∫—Ä–∏–ø—Ç–æ
        plt.figure(figsize=(10, 8))
        plt.scatter(country_data['Inflation'], country_data['Crypto_Adoption'], 
                   s=100, alpha=0.7, color=colors[country_code])
        
        # –õ–∏–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
        z = np.polyfit(country_data['Inflation'], country_data['Crypto_Adoption'], 1)
        p = np.poly1d(z)
        plt.plot(country_data['Inflation'], p(country_data['Inflation']), 
                "r--", alpha=0.8, linewidth=2)
        
        correlation = country_data['Inflation'].corr(country_data['Crypto_Adoption'])
        plt.title(f'–°–≤—è–∑—å –∏–Ω—Ñ–ª—è—Ü–∏–∏ –∏ –∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏–∏: {country_name}', fontsize=16, fontweight='bold')
        plt.xlabel('–ò–Ω—Ñ–ª—è—Ü–∏—è (%)', fontsize=12)
        plt.ylabel('–ö—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏—è (%)', fontsize=12)
        plt.text(0.05, 0.95, f'–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {correlation:.3f}', 
                transform=plt.gca().transAxes, fontsize=14, fontweight='bold',
                bbox=dict(boxstyle="round", facecolor='yellow', alpha=0.8))
        plt.grid(True, alpha=0.3)
        plt.tight_layout()
        plt.savefig(os.path.join(country_folder, f'{country_code.lower()}_correlation.png'), dpi=300, bbox_inches='tight')
        plt.close()
        
        # –ì—Ä–∞—Ñ–∏–∫ 3: –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 12))
        
        # –í–í–ü –Ω–∞ –¥—É—à—É –Ω–∞—Å–µ–ª–µ–Ω–∏—è
        ax1.plot(country_data['Year'], country_data['GDP_Per_Capita'], 
                color=colors[country_code], linewidth=2, marker='o')
        ax1.set_title('–í–í–ü –Ω–∞ –¥—É—à—É –Ω–∞—Å–µ–ª–µ–Ω–∏—è (USD)', fontweight='bold')
        ax1.grid(True, alpha=0.3)
        
        # –ë–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–∞
        ax2.plot(country_data['Year'], country_data['Unemployment'], 
                color='red', linewidth=2, marker='s')
        ax2.set_title('–£—Ä–æ–≤–µ–Ω—å –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü—ã (%)', fontweight='bold')
        ax2.grid(True, alpha=0.3)
        
        # –≠–∫—Å–ø–æ—Ä—Ç/–ò–º–ø–æ—Ä—Ç
        ax3.plot(country_data['Year'], country_data['Exports'], 
                color='green', linewidth=2, marker='^', label='–≠–∫—Å–ø–æ—Ä—Ç')
        ax3.plot(country_data['Year'], country_data['Imports'], 
                color='orange', linewidth=2, marker='v', label='–ò–º–ø–æ—Ä—Ç')
        ax3.set_title('–¢–æ—Ä–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å (–º–ª—Ä–¥ USD)', fontweight='bold')
        ax3.legend()
        ax3.grid(True, alpha=0.3)
        
        # –î–æ–≤–µ—Ä–∏–µ –∫ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤—É
        ax4.plot(country_data['Year'], country_data['Government_Trust'], 
                color='purple', linewidth=2, marker='d')
        ax4.set_title('–î–æ–≤–µ—Ä–∏–µ –∫ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤—É (%)', fontweight='bold')
        ax4.grid(True, alpha=0.3)
        
        plt.suptitle(f'–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏: {country_name}', fontsize=16, fontweight='bold')
        plt.tight_layout()
        plt.savefig(os.path.join(country_folder, f'{country_code.lower()}_economics.png'), dpi=300, bbox_inches='tight')
        plt.close()
        
        # 2. –°–û–ó–î–ê–ù–ò–ï HTML –°–¢–†–ê–ù–ò–¶–´ –î–õ–Ø –°–¢–†–ê–ù–´
        
        # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
        avg_crypto = country_data['Crypto_Adoption'].mean()
        max_crypto = country_data['Crypto_Adoption'].max()
        max_crypto_year = country_data.loc[country_data['Crypto_Adoption'].idxmax(), 'Year']
        growth_2010_2025 = ((country_data['Crypto_Adoption'].iloc[-1] / country_data['Crypto_Adoption'].iloc[0]) - 1) * 100
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        strategy_description = {
            '–ó–ê–©–ò–¢–ù–ò–ö': '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∫–∞–∫ –∑–∞—â–∏—Ç—É –æ—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ –¥–µ–≤–∞–ª—å–≤–∞—Ü–∏–∏ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –≤–∞–ª—é—Ç—ã',
            '–î–ò–í–ï–†–°–ò–§–ò–ö–ê–¢–û–†': '–í–∫–ª—é—á–∞–µ—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≤ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å –¥–ª—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–∏—Å–∫–æ–≤',
            '–ò–ù–ù–û–í–ê–¢–û–†': '–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∫–∞–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –∏–Ω–Ω–æ–≤–∞—Ü–∏—é –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ü–∏—Ñ—Ä–æ–≤–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏',
            '–ü–û–î–ê–í–õ–ï–ù–ù–´–ô': '–ö—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–º —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º'
        }
        
        html_content = f"""
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>–ê–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏–∏: {country_name}</title>
            <style>
                body {{
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                    margin: 0;
                    padding: 20px;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: #333;
                }}
                .container {{
                    max-width: 1200px;
                    margin: 0 auto;
                    background: white;
                    border-radius: 15px;
                    box-shadow: 0 10px 30px rgba(0,0,0,0.2);
                    overflow: hidden;
                }}
                .header {{
                    background: {colors[country_code]};
                    color: white;
                    padding: 30px;
                    text-align: center;
                }}
                .header h1 {{
                    margin: 0;
                    font-size: 2.5em;
                    text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
                }}
                .header p {{
                    margin: 10px 0 0 0;
                    font-size: 1.2em;
                    opacity: 0.9;
                }}
                .content {{
                    padding: 30px;
                }}
                .stats-grid {{
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                    gap: 20px;
                    margin: 30px 0;
                }}
                .stat-card {{
                    background: #f8f9fa;
                    padding: 20px;
                    border-radius: 10px;
                    text-align: center;
                    border-left: 5px solid {colors[country_code]};
                }}
                .stat-number {{
                    font-size: 2.5em;
                    font-weight: bold;
                    color: {colors[country_code]};
                    margin: 0;
                }}
                .stat-label {{
                    color: #666;
                    margin: 5px 0 0 0;
                    font-size: 0.9em;
                }}
                .section {{
                    margin: 40px 0;
                    padding: 20px;
                    background: #f8f9fa;
                    border-radius: 10px;
                }}
                .section h2 {{
                    color: {colors[country_code]};
                    border-bottom: 2px solid {colors[country_code]};
                    padding-bottom: 10px;
                }}
                .chart-container {{
                    text-align: center;
                    margin: 20px 0;
                }}
                .chart-container img {{
                    max-width: 100%;
                    height: auto;
                    border-radius: 8px;
                    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
                }}
                .strategy-badge {{
                    display: inline-block;
                    background: {colors[country_code]};
                    color: white;
                    padding: 8px 16px;
                    border-radius: 20px;
                    font-weight: bold;
                    margin: 10px 0;
                }}
                .data-table {{
                    width: 100%;
                    border-collapse: collapse;
                    margin: 20px 0;
                }}
                .data-table th, .data-table td {{
                    padding: 12px;
                    text-align: left;
                    border-bottom: 1px solid #ddd;
                }}
                .data-table th {{
                    background-color: {colors[country_code]};
                    color: white;
                }}
                .data-table tr:nth-child(even) {{
                    background-color: #f2f2f2;
                }}
                .highlight {{
                    background: linear-gradient(120deg, {colors[country_code]}22 0%, {colors[country_code]}44 100%);
                    padding: 15px;
                    border-radius: 8px;
                    margin: 15px 0;
                }}
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>üèõÔ∏è {country_name}</h1>
                    <p>–ê–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏–∏ (2010-2025)</p>
                    <div class="strategy-badge">{country_info['strategy_type']}</div>
                </div>
                
                <div class="content">
                    <div class="section">
                        <h2>üìä –ö–ª—é—á–µ–≤—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</h2>
                        <div class="stats-grid">
                            <div class="stat-card">
                                <div class="stat-number">{avg_crypto:.1f}%</div>
                                <div class="stat-label">–°—Ä–µ–¥–Ω—è—è –∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏—è</div>
                            </div>
                            <div class="stat-card">
                                <div class="stat-number">{max_crypto:.1f}%</div>
                                <div class="stat-label">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∞–¥–æ–ø—Ü–∏—è ({int(max_crypto_year)})</div>
                            </div>
                            <div class="stat-card">
                                <div class="stat-number">{correlation:.3f}</div>
                                <div class="stat-label">–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –∏–Ω—Ñ–ª—è—Ü–∏–µ–π</div>
                            </div>
                            <div class="stat-card">
                                <div class="stat-number">{growth_2010_2025:.0f}%</div>
                                <div class="stat-label">–†–æ—Å—Ç —Å 2010 –≥–æ–¥–∞</div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="section">
                        <h2>üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏–∏</h2>
                        <div class="highlight">
                            <strong>–¢–∏–ø —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:</strong> {country_info['strategy_type']}<br>
                            <strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {strategy_description[country_info['strategy_type']]}<br>
                            <strong>–û—Å–Ω–æ–≤–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</strong> {', '.join(country_info['main_crypto'])}<br>
                            <strong>–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:</strong> {country_info['crypto_preference']}<br>
                            <strong>–î—Ä–∞–π–≤–µ—Ä—ã –∞–¥–æ–ø—Ü–∏–∏:</strong> {country_info['crypto_drivers']}
                        </div>
                    </div>
                    
                    <div class="section">
                        <h2>üìà –î–∏–Ω–∞–º–∏–∫–∞ –∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏–∏</h2>
                        <div class="chart-container">
                            <img src="{country_code.lower()}_crypto_trend.png" alt="–î–∏–Ω–∞–º–∏–∫–∞ –∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏–∏ {country_name}">
                        </div>
                        <p>–ì—Ä–∞—Ñ–∏–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–æ–ª–∏ –Ω–∞—Å–µ–ª–µ–Ω–∏—è, –≤–ª–∞–¥–µ—é—â–µ–≥–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏, —Å 2010 –ø–æ 2025 –≥–æ–¥.</p>
                    </div>
                    
                    <div class="section">
                        <h2>üîó –°–≤—è–∑—å —Å –∏–Ω—Ñ–ª—è—Ü–∏–µ–π</h2>
                        <div class="chart-container">
                            <img src="{country_code.lower()}_correlation.png" alt="–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –∏–Ω—Ñ–ª—è—Ü–∏–∏ –∏ –∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏–∏ {country_name}">
                        </div>
                        <p>–î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Å–µ—è–Ω–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–∑–∞–∏–º–æ—Å–≤—è–∑—å –º–µ–∂–¥—É —É—Ä–æ–≤–Ω–µ–º –∏–Ω—Ñ–ª—è—Ü–∏–∏ –∏ –∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏–µ–π. 
                        –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <strong>{correlation:.3f}</strong>.</p>
                    </div>
                    
                    <div class="section">
                        <h2>üí∞ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏</h2>
                        <div class="chart-container">
                            <img src="{country_code.lower()}_economics.png" alt="–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ {country_name}">
                        </div>
                        <p>–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤, –≤–ª–∏—è—é—â–∏—Ö –Ω–∞ –∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏—é.</p>
                    </div>
                    
                    <div class="section">
                        <h2>üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h2>
                        <table class="data-table">
                            <thead>
                                <tr>
                                    <th>–ì–æ–¥</th>
                                    <th>–ö—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏—è (%)</th>
                                    <th>–ò–Ω—Ñ–ª—è—Ü–∏—è (%)</th>
                                    <th>–í–í–ü –Ω–∞ –¥—É—à—É (USD)</th>
                                    <th>–ë–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–∞ (%)</th>
                                </tr>
                            </thead>
                            <tbody>
        """
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É
        for _, row in country_data.iterrows():
            html_content += f"""
                                <tr>
                                    <td>{int(row['Year'])}</td>
                                    <td>{row['Crypto_Adoption']:.2f}%</td>
                                    <td>{row['Inflation']:.2f}%</td>
                                    <td>${row['GDP_Per_Capita']:,.0f}</td>
                                    <td>{row['Unemployment']:.2f}%</td>
                                </tr>
            """
        
        html_content += f"""
                            </tbody>
                        </table>
                    </div>
                    
                    <div class="section">
                        <h2>üîç –í—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h2>
                        <div class="highlight">
        """
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—ã–≤–æ–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
        if correlation > 0.5:
            html_content += f"<p><strong>–í—ã—Å–æ–∫–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è ({correlation:.3f}):</strong> –í {country_name} –Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è —Å–∏–ª—å–Ω–∞—è —Å–≤—è–∑—å –º–µ–∂–¥—É –∏–Ω—Ñ–ª—è—Ü–∏–µ–π –∏ –∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏–µ–π. –ù–∞—Å–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∫–∞–∫ –∑–∞—â–∏—Ç—É –æ—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏.</p>"
        elif correlation > 0.3:
            html_content += f"<p><strong>–£–º–µ—Ä–µ–Ω–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è ({correlation:.3f}):</strong> –í {country_name} –∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏—è —á–∞—Å—Ç–∏—á–Ω–æ —Å–≤—è–∑–∞–Ω–∞ —Å –∏–Ω—Ñ–ª—è—Ü–∏–µ–π, –Ω–æ —Ç–∞–∫–∂–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –¥—Ä—É–≥–∏–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏.</p>"
        elif correlation < 0:
            html_content += f"<p><strong>–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è ({correlation:.3f}):</strong> –í {country_name} –Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π - —Ä–æ—Å—Ç –∏–Ω—Ñ–ª—è—Ü–∏–∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ—Ç—Å—è —Å–Ω–∏–∂–µ–Ω–∏–µ–º –∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏–∏, —á—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ.</p>"
        else:
            html_content += f"<p><strong>–°–ª–∞–±–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è ({correlation:.3f}):</strong> –í {country_name} –∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏, –∞ –Ω–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º–∏ –∫—Ä–∏–∑–∏—Å–∞–º–∏.</p>"
        
        html_content += f"""
                        </div>
                    </div>
                </div>
            </div>
        </body>
        </html>
        """
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML —Ñ–∞–π–ª
        html_path = os.path.join(country_folder, f'{country_code.lower()}_analysis.html')
        with open(html_path, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        print(f"   ‚úÖ –ê–Ω–∞–ª–∏–∑ –¥–ª—è {country_name} —Å–æ–∑–¥–∞–Ω")
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    create_countries_index_page(countries, strany_path, colors)
    
    print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ –≤—Å–µ–º —Å—Ç—Ä–∞–Ω–∞–º —Å–æ–∑–¥–∞–Ω –≤ –ø–∞–ø–∫–µ: {strany_path}")

def create_countries_index_page(countries: Dict[str, Any], strany_path: str, colors: Dict[str, str]):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω"""
    
    html_content = f"""
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>–ê–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º</title>
        <style>
            body {{
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                margin: 0;
                padding: 20px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: #333;
            }}
            .container {{
                max-width: 1200px;
                margin: 0 auto;
                background: white;
                border-radius: 15px;
                box-shadow: 0 10px 30px rgba(0,0,0,0.2);
                overflow: hidden;
            }}
            .header {{
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                padding: 40px;
                text-align: center;
            }}
            .header h1 {{
                margin: 0;
                font-size: 3em;
                text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
            }}
            .countries-grid {{
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
                gap: 30px;
                padding: 40px;
            }}
            .country-card {{
                background: white;
                border-radius: 15px;
                box-shadow: 0 8px 25px rgba(0,0,0,0.1);
                overflow: hidden;
                transition: transform 0.3s ease, box-shadow 0.3s ease;
                border-top: 5px solid;
            }}
            .country-card:hover {{
                transform: translateY(-5px);
                box-shadow: 0 15px 35px rgba(0,0,0,0.2);
            }}
            .country-header {{
                padding: 25px;
                color: white;
                text-align: center;
            }}
            .country-body {{
                padding: 25px;
            }}
            .country-title {{
                font-size: 1.8em;
                font-weight: bold;
                margin: 0;
            }}
            .country-subtitle {{
                opacity: 0.9;
                margin: 5px 0 0 0;
            }}
            .strategy-badge {{
                display: inline-block;
                background: rgba(255,255,255,0.2);
                padding: 5px 12px;
                border-radius: 15px;
                font-size: 0.9em;
                margin-top: 10px;
            }}
            .country-stats {{
                display: grid;
                grid-template-columns: 1fr 1fr;
                gap: 15px;
                margin: 20px 0;
            }}
            .stat {{
                text-align: center;
                padding: 15px;
                background: #f8f9fa;
                border-radius: 8px;
            }}
            .stat-number {{
                font-size: 1.5em;
                font-weight: bold;
                margin: 0;
            }}
            .stat-label {{
                color: #666;
                font-size: 0.9em;
                margin: 5px 0 0 0;
            }}
            .view-button {{
                display: block;
                width: 100%;
                padding: 15px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                text-decoration: none;
                text-align: center;
                border-radius: 8px;
                font-weight: bold;
                transition: opacity 0.3s ease;
            }}
            .view-button:hover {{
                opacity: 0.9;
            }}
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üåç –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º</h1>
                <p>–í–æ—Å—Ç–æ—á–Ω–∞—è –ï–≤—Ä–æ–ø–∞ (2010-2025)</p>
            </div>
            
            <div class="countries-grid">
    """
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç—Ä–∞–Ω
    for country_code, country_info in countries.items():
        country_name = country_info['name_ru']
        html_content += f"""
                <div class="country-card" style="border-top-color: {colors[country_code]};">
                    <div class="country-header" style="background: {colors[country_code]};">
                        <h2 class="country-title">{country_name}</h2>
                        <p class="country-subtitle">{country_info['currency']}</p>
                        <div class="strategy-badge">{country_info['strategy_type']}</div>
                    </div>
                    <div class="country-body">
                        <div class="country-stats">
                            <div class="stat">
                                <div class="stat-number" style="color: {colors[country_code]};">{country_info['population']}</div>
                                <div class="stat-label">–º–ª–Ω –Ω–∞—Å–µ–ª–µ–Ω–∏—è</div>
                            </div>
                            <div class="stat">
                                <div class="stat-number" style="color: {colors[country_code]};">{country_info['internet_penetration']}%</div>
                                <div class="stat-label">–∏–Ω—Ç–µ—Ä–Ω–µ—Ç</div>
                            </div>
                        </div>
                        <p><strong>–û—Å–Ω–æ–≤–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</strong> {', '.join(country_info['main_crypto'])}</p>
                        <p><strong>–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:</strong> {country_info['crypto_preference']}</p>
                        <a href="{country_code.lower()}/{country_code.lower()}_analysis.html" class="view-button">
                            üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                        </a>
                    </div>
                </div>
        """
    
    html_content += """
            </div>
        </div>
    </body>
    </html>
    """
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    index_path = os.path.join(strany_path, 'index.html')
    with open(index_path, 'w', encoding='utf-8') as f:
        f.write(html_content)
    
    print(f"‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞: {index_path}")
def create_interactive_dynamics_chart(df, countries, base):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–∏–Ω–∞–º–∏–∫–∏"""
    print("üé® –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–∏–Ω–∞–º–∏–∫–∏...")
    
    colors = {'Ukraine': '#FF6B6B', 'Poland': '#4ECDC4', 'Czech': '#45B7D1', 
              'Sweden': '#96CEB4', 'Norway': '#FFEAA7', 'Belarus': '#DDA0DD'}
    
    fig_dynamic = go.Figure()
    
    for country_code, country_info in countries.items():
        country_data = df[df['Country'] == country_code]
        country_name = country_info['name_ru']
        
        fig_dynamic.add_trace(go.Scatter(
            x=country_data['Year'],
            y=country_data['Crypto_Adoption'],
            mode='lines+markers',
            name=country_name,
            line=dict(color=colors[country_code], width=3),
            marker=dict(size=8),
            hovertemplate=f'<b>{country_name}</b><br>' +
                         'Rok: %{x}<br>' +
                         'Adopcja BTC: %{y:.1f}%<br>' +
                         'Zaufanie do pa≈Ñstwa: %{customdata:.0f}%<br>' +
                         '<extra></extra>',
            customdata=country_data['Government_Trust']
        ))
    
    # –°–æ–±—ã—Ç–∏—è
    fig_dynamic.add_vline(x=2014, line_dash="dash", line_color="gray", 
                         annotation_text="Majdan na Ukrainie", annotation_position="top")
    fig_dynamic.add_vline(x=2020, line_dash="dash", line_color="orange", 
                         annotation_text="COVID-19", annotation_position="top")
    fig_dynamic.add_vline(x=2022, line_dash="dash", line_color="red", 
                         annotation_text="Wojna na Ukrainie", annotation_position="top")
    
    fig_dynamic.update_layout(
        title='Dynamika adopcji kryptowalut w krajach Europy Wschodniej (2010-2025)',
        xaxis_title='Rok',
        yaxis_title='Adopcja kryptowalut (%)',
        hovermode='x unified',
        template='plotly_white',
        width=1200,
        height=600,
        legend=dict(x=0.02, y=0.98)
    )
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    grafiki_path = os.path.join(base, 'grafiki')
    fig_dynamic.write_html(os.path.join(grafiki_path, 'interactive_dynamics.html'))
    
    print("‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ —Å–æ–∑–¥–∞–Ω!")
    return fig_dynamic

def create_methodology_and_sources(base: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–µ–π –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö"""
    print("üìö –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
    
    rezultaty_path = os.path.join(base, 'rezultaty')
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –∏ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–µ–π
    with open(os.path.join(rezultaty_path, 'metodologiya_i_istochniki.txt'), 'w', encoding='utf-8') as f:
        f.write("–ú–ï–¢–û–î–û–õ–û–ì–ò–Ø –ò –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–•\n")
        f.write("–ê–ù–ê–õ–ò–ó –ö–†–ò–ü–¢–û–ê–î–û–ü–¶–ò–ò –í –í–û–°–¢–û–ß–ù–û–ô –ï–í–†–û–ü–ï (2010-2025)\n")
        f.write("=" * 80 + "\n\n")
        
        f.write("üìä –ò–°–¢–û–ß–ù–ò–ö–ò –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–•:\n")
        f.write("-" * 40 + "\n")
        f.write("‚Ä¢ –í–í–ü –Ω–∞ –¥—É—à—É –Ω–∞—Å–µ–ª–µ–Ω–∏—è:\n")
        f.write("  - World Bank Open Data (data.worldbank.org)\n")
        f.write("  - Trading Economics (tradingeconomics.com)\n")
        f.write("  - Macrotrends (macrotrends.net)\n")
        f.write("  - OECD Statistics (stats.oecd.org)\n\n")
        
        f.write("‚Ä¢ –ò–Ω—Ñ–ª—è—Ü–∏—è:\n")
        f.write("  - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –±–∞–Ω–∫–∏ —Å—Ç—Ä–∞–Ω:\n")
        f.write("    * NBU (–£–∫—Ä–∞–∏–Ω–∞) - bank.gov.ua\n")
        f.write("    * NBP (–ü–æ–ª—å—à–∞) - nbp.pl\n")
        f.write("    * CNB (–ß–µ—Ö–∏—è) - cnb.cz\n")
        f.write("    * Riksbank (–®–≤–µ—Ü–∏—è) - riksbank.se\n")
        f.write("    * Norges Bank (–ù–æ—Ä–≤–µ–≥–∏—è) - norges-bank.no\n")
        f.write("    * NBRB (–ë–µ–ª–∞—Ä—É—Å—å) - nbrb.by\n")
        f.write("  - Trading Economics\n")
        f.write("  - YCharts (ycharts.com)\n")
        f.write("  - Inflation.eu\n\n")
        
        f.write("‚Ä¢ –ë–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–∞ –∏ —Ä–æ—Å—Ç –í–í–ü:\n")
        f.write("  - Eurostat (ec.europa.eu/eurostat)\n")
        f.write("  - OECD Employment Outlook\n")
        f.write("  - –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Å–ª—É–∂–±—ã\n\n")
        
        f.write("‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç/–ò–º–ø–æ—Ä—Ç:\n")
        f.write("  - UN Comtrade Database\n")
        f.write("  - WTO Statistics\n")
        f.write("  - –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–∞–º–æ–∂–µ–Ω–Ω—ã–µ —Å–ª—É–∂–±—ã\n\n")
        
        f.write("ü™ô –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–• –û –ö–†–ò–ü–¢–û–ê–î–û–ü–¶–ò–ò:\n")
        f.write("-" * 40 + "\n")
        f.write("‚Ä¢ Chainalysis Global Crypto Adoption Index\n")
        f.write("‚Ä¢ Triple-A Crypto Ownership Report\n")
        f.write("‚Ä¢ Henley Crypto Adoption Index 2024\n")
        f.write("‚Ä¢ Statista Cryptocurrency Statistics\n")
        f.write("‚Ä¢ CoinMarketCap Research\n")
        f.write("‚Ä¢ Binance Research Reports\n")
        f.write("‚Ä¢ Finder.com Crypto Adoption Surveys\n\n")
        
        f.write("üèõÔ∏è –ò–°–¢–û–ß–ù–ò–ö–ò –ü–û–õ–ò–¢–ò–ß–ï–°–ö–ò–• –ò –°–û–¶–ò–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•:\n")
        f.write("-" * 40 + "\n")
        f.write("‚Ä¢ –ò–Ω–¥–µ–∫—Å –∫–æ—Ä—Ä—É–ø—Ü–∏–∏:\n")
        f.write("  - Transparency International CPI\n")
        f.write("‚Ä¢ –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å:\n")
        f.write("  - World Bank Worldwide Governance Indicators\n")
        f.write("‚Ä¢ –î–æ–≤–µ—Ä–∏–µ –∫ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤—É:\n")
        f.write("  - OECD Government at a Glance\n")
        f.write("  - Edelman Trust Barometer\n")
        f.write("  - Gallup World Poll\n\n")
        
        f.write("üî¨ –ú–ï–¢–û–î–û–õ–û–ì–ò–Ø –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø:\n")
        f.write("-" * 40 + "\n")
        f.write("‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏: 2010-2025 (16 –ª–µ—Ç)\n")
        f.write("‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω: 6 (–£–∫—Ä–∞–∏–Ω–∞, –ü–æ–ª—å—à–∞, –ß–µ—Ö–∏—è, –®–≤–µ—Ü–∏—è, –ù–æ—Ä–≤–µ–≥–∏—è, –ë–µ–ª–∞—Ä—É—Å—å)\n")
        f.write("‚Ä¢ –û–±—â–∏–π –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö: 96 –Ω–∞–±–ª—é–¥–µ–Ω–∏–π (16 –ª–µ—Ç √ó 6 —Å—Ç—Ä–∞–Ω)\n")
        f.write("‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: 22 –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω—É\n\n")
        
        f.write("‚Ä¢ –ú–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞:\n")
        f.write("  - –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ü–∏—Ä—Å–æ–Ω–∞)\n")
        f.write("  - –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã\n")
        f.write("  - –ö–ª–∞—Å—Ç–µ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Ç–∏–ø–æ–ª–æ–≥–∏–∏ —Å—Ç—Ä–∞–Ω\n")
        f.write("  - –û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n")
        
        f.write("‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ:\n")
        f.write("  - Python 3.13 (pandas, numpy, matplotlib)\n")
        f.write("  - Excel –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö\n\n")
        
        f.write("‚ö†Ô∏è –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø:\n")
        f.write("-" * 40 + "\n")
        f.write("‚Ä¢ –î–∞–Ω–Ω—ã–µ –ø–æ –∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏–∏ –¥–æ 2018 –≥–æ–¥–∞ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —ç–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü–∏–∏\n")
        f.write("‚Ä¢ –ë–µ–ª–∞—Ä—É—Å—å: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n")
        f.write("‚Ä¢ –£–∫—Ä–∞–∏–Ω–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞ 2022-2023 –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω—ã–º–∏ –∏–∑-–∑–∞ –≤–æ–π–Ω—ã\n")
        f.write("‚Ä¢ –†–∞–∑–ª–∏—á–∏—è –≤ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏–∏ –º–µ–∂–¥—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏\n")
        f.write("‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —Ç–µ–∫—É—â–∏—Ö —Ç—Ä–µ–Ω–¥–∞—Ö –∏ –º–æ–≥—É—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è\n\n")
        
        f.write("üìù –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ê–ù–ù–´–•:\n")
        f.write("-" * 40 + "\n")
        f.write("‚Ä¢ –ö—Ä–æ—Å—Å-–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏\n")
        f.write("‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º–∏\n")
        f.write("‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã–±—Ä–æ—Å—ã –∏ –∞–Ω–æ–º–∞–ª–∏–∏\n")
        f.write("‚Ä¢ –≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n\n")
        
        f.write("üéØ –ù–ê–£–ß–ù–ê–Ø –ù–û–í–ò–ó–ù–ê:\n")
        f.write("-" * 40 + "\n")
        f.write("‚Ä¢ –ü–µ—Ä–≤–æ–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏–∏ –≤ –í–æ—Å—Ç–æ—á–Ω–æ–π –ï–≤—Ä–æ–ø–µ\n")
        f.write("‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Ç–∏–ø–æ–ª–æ–≥–∏—è —Å—Ç—Ä–∞–Ω –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º –∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏–∏\n")
        f.write("‚Ä¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –≤ –∞–≤—Ç–æ—Ä–∏—Ç–∞—Ä–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö\n")
        f.write("‚Ä¢ –ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –≥–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫—Ä–∏–∑–∏—Å–æ–≤ –Ω–∞ –∞–¥–æ–ø—Ü–∏—é\n\n")
    
    print(f"‚úÖ –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–æ–∑–¥–∞–Ω—ã: {rezultaty_path}")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ANALYSIS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def create_comprehensive_analysis(df: pd.DataFrame, countries: Dict[str, Any], base: str):
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞‚Ä¶")
    df = optimize_int_columns(df)

    # ‚Äî –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
    num_cols = [c for c in df.columns if df[c].dtype != "object" and c not in ("Year",)]
    corr_matrix = df[num_cols].corr()

    country_corr = {}
    for c in df["Country"].unique():
        country_data = df[df["Country"] == c]
        country_name = countries[c]["name_ru"]
        corr = country_data["Inflation"].corr(country_data["Crypto_Adoption"])
        country_corr[country_name] = round(corr, 3)

    periods = {
        "–î–æ –∫—Ä–∏–∑–∏—Å–∞ (2010-2019)": df[df["Year"] <= 2019],
        "–ü–∞–Ω–¥–µ–º–∏—è (2020-2021)": df[df["Year"].between(2020, 2021)],
        "–ö—Ä–∏–∑–∏—Å (2022-2023)": df[df["Year"].between(2022, 2023)],
        "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ (2024-2025)": df[df["Year"] >= 2024],
    }
    period_corr = {}
    for k, v in periods.items():
        if len(v) > 0:
            corr = v["Inflation"].corr(v["Crypto_Adoption"])
            period_corr[k] = round(corr, 3)

    # ‚Äî –ì—Ä–∞—Ñ–∏–∫–∏
    print("üé® –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤...")
    colors = {'Ukraine': 'red', 'Poland': 'orange', 'Czech': 'blue', 
              'Sweden': 'green', 'Norway': 'purple', 'Belarus': 'gray'}
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: –î–∏–Ω–∞–º–∏–∫–∞ –∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏–∏
    plt.figure(figsize=(16, 10))
    for country in df['Country'].unique():
        country_data = df[df['Country'] == country]
        country_name = countries[country]['name_ru']
        plt.plot(country_data['Year'], country_data['Crypto_Adoption'], 
                marker='o', linewidth=3, label=country_name, color=colors[country])
    
    plt.axvline(x=2014, color='gray', linestyle='--', alpha=0.7)
    plt.text(2014.1, 8, '–ú–∞–π–¥–∞–Ω\n–£–∫—Ä–∞–∏–Ω–∞', fontsize=10, alpha=0.8)
    plt.axvline(x=2020, color='gray', linestyle='--', alpha=0.7)
    plt.text(2020.1, 10, 'COVID-19\n–ü–∞–Ω–¥–µ–º–∏—è', fontsize=10, alpha=0.8)
    plt.axvline(x=2022, color='red', linestyle='--', alpha=0.7)
    plt.text(2022.1, 11, '–í–æ–π–Ω–∞\n–í–∑—Ä—ã–≤ –∞–¥–æ–ø—Ü–∏–∏', fontsize=10, color='red')
    
    plt.title('–î–∏–Ω–∞–º–∏–∫–∞ –∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏–∏ –≤ –í–æ—Å—Ç–æ—á–Ω–æ–π –ï–≤—Ä–æ–ø–µ (2010-2025)', fontsize=16, fontweight='bold')
    plt.xlabel('–ì–æ–¥', fontsize=12)
    plt.ylabel('–ü—Ä–æ—Ü–µ–Ω—Ç –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (%)', fontsize=12)
    plt.legend(fontsize=12)
    plt.grid(True, alpha=0.3)
    plt.tight_layout()
    plt.savefig(os.path.join(base, 'grafiki', '01_dinamika_kripto_2010_2025.png'), dpi=300, bbox_inches='tight')
    plt.close()
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è
    plt.figure(figsize=(12, 8))
    for country in df['Country'].unique():
        country_data = df[df['Country'] == country]
        country_name = countries[country]['name_ru']
        sizes = country_data['Currency_Volatility'] * 5
        plt.scatter(country_data['Inflation'], country_data['Crypto_Adoption'], 
                   s=sizes, alpha=0.7, label=country_name, color=colors[country])
    
    z = np.polyfit(df['Inflation'], df['Crypto_Adoption'], 1)
    p = np.poly1d(z)
    plt.plot(df['Inflation'], p(df['Inflation']), "r--", alpha=0.8, linewidth=2)
    
    correlation = df['Inflation'].corr(df['Crypto_Adoption'])
    plt.text(0.05, 0.95, f'–û–±—â–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {correlation:.3f}', 
             transform=plt.gca().transAxes, fontsize=14, fontweight='bold',
             bbox=dict(boxstyle="round", facecolor='yellow', alpha=0.8))
    
    plt.title('–°–≤—è–∑—å –º–µ–∂–¥—É –∏–Ω—Ñ–ª—è—Ü–∏–µ–π –∏ –∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏–µ–π', fontsize=16, fontweight='bold')
    plt.xlabel('–£—Ä–æ–≤–µ–Ω—å –∏–Ω—Ñ–ª—è—Ü–∏–∏ (%)', fontsize=12)
    plt.ylabel('–ö—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏—è (%)', fontsize=12)
    plt.legend(fontsize=10)
    plt.grid(True, alpha=0.3)
    plt.tight_layout()
    plt.savefig(os.path.join(base, 'grafiki', '02_inflation_vs_crypto.png'), dpi=300, bbox_inches='tight')
    plt.close()
    
    print("‚úÖ –ì—Ä–∞—Ñ–∏–∫–∏ —Å–æ–∑–¥–∞–Ω—ã!")

    return corr_matrix, country_corr, period_corr
def create_trust_btc_analysis(df, countries, base):
    """–ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –¥–æ–≤–µ—Ä–∏–µ–º –∫ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É –∏ –∞–¥–æ–ø—Ü–∏–µ–π BTC"""
    print("üîç –ê–Ω–∞–ª–∏–∑ zaufanie vs adopcja BTC...")
    
    # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
    trust_correlations = {}
    for country_code, country_info in countries.items():
        country_data = df[df['Country'] == country_code]
        country_name = country_info['name_ru']
        
        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –¥–æ–≤–µ—Ä–∏—è –∏ BTC (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è = —á–µ–º –º–µ–Ω—å—à–µ –¥–æ–≤–µ—Ä–∏—è, —Ç–µ–º –±–æ–ª—å—à–µ BTC)
        trust_btc_corr = country_data['Government_Trust'].corr(country_data['Crypto_Adoption'])
        trust_correlations[country_name] = round(trust_btc_corr, 3)
    
    # –û–±—â–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è
    overall_trust_corr = df['Government_Trust'].corr(df['Crypto_Adoption'])
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –¥–æ–≤–µ—Ä–∏–µ vs BTC
    fig_trust = go.Figure()
    
    colors = {'Ukraine': '#FF6B6B', 'Poland': '#4ECDC4', 'Czech': '#45B7D1', 
              'Sweden': '#96CEB4', 'Norway': '#FFEAA7', 'Belarus': '#DDA0DD'}
    
    for country_code, country_info in countries.items():
        country_data = df[df['Country'] == country_code]
        country_name = country_info['name_ru']
        
        fig_trust.add_trace(go.Scatter(
            x=country_data['Government_Trust'],
            y=country_data['Crypto_Adoption'],
            mode='markers',
            name=country_name,
            marker=dict(
                size=10,
                color=colors[country_code],
                opacity=0.7
            ),
            hovertemplate=f'<b>{country_name}</b><br>' +
                         'Zaufanie do pa≈Ñstwa: %{x:.0f}%<br>' +
                         'Adopcja BTC: %{y:.1f}%<br>' +
                         'Rok: %{customdata}<br>' +
                         '<extra></extra>',
            customdata=country_data['Year']
        ))
    
    # –õ–∏–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
    from scipy import stats
    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Government_Trust'], df['Crypto_Adoption'])
    line_x = [df['Government_Trust'].min(), df['Government_Trust'].max()]
    line_y = [slope * x + intercept for x in line_x]
    
    fig_trust.add_trace(go.Scatter(
        x=line_x,
        y=line_y,
        mode='lines',
        name=f'Trend (r={r_value:.3f})',
        line=dict(color='red', dash='dash', width=2)
    ))
    
    fig_trust.update_layout(
        title='Zale≈ºno≈õƒá miƒôdzy zaufaniem do pa≈Ñstwa a adopcjƒÖ BTC',
        xaxis_title='Zaufanie do pa≈Ñstwa (%)',
        yaxis_title='Adopcja BTC (%)',
        template='plotly_white',
        width=1000,
        height=600
    )
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    grafiki_path = os.path.join(base, 'grafiki')
    fig_trust.write_html(os.path.join(grafiki_path, 'trust_vs_btc.html'))
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Excel
    trust_analysis_path = os.path.join(base, 'otchety', 'trust_btc_analysis.xlsx')
    with pd.ExcelWriter(trust_analysis_path, engine='openpyxl') as writer:
        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
        trust_df = pd.DataFrame(list(trust_correlations.items()), 
                               columns=['Kraj', 'Korelacja_Zaufanie_BTC'])
        trust_df = trust_df.sort_values('Korelacja_Zaufanie_BTC')
        trust_df.to_excel(writer, sheet_name='Korelacje_Zaufanie_BTC', index=False)
        
        # –û–±—â–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_df = pd.DataFrame({
            'Wska≈∫nik': ['Og√≥lna korelacja zaufanie-BTC', 'R-squared', 'P-value'],
            'Warto≈õƒá': [overall_trust_corr, r_value**2, p_value]
        })
        stats_df.to_excel(writer, sheet_name='Statystyki_Og√≥lne', index=False)
    
    print(f"‚úÖ Analiza zaufanie vs BTC zako≈Ñczona!")
    print(f"   üìä Og√≥lna korelacja: {overall_trust_corr:.3f}")
    print(f"   üìà R-squared: {r_value**2:.3f}")
    
    return trust_correlations, overall_trust_corr, fig_trust

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ REPORTS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def create_excel_reports(df: pd.DataFrame, countries: Dict[str, Any], corr_m: pd.DataFrame,
                         country_corr: Dict[str, float], period_corr: Dict[str, float], base: str):
    print("üìã –°–æ–∑–¥–∞–Ω–∏–µ Excel –æ—Ç—á—ë—Ç–æ–≤‚Ä¶")
    df = optimize_int_columns(df)
    path = os.path.join(base, "otchety", "full_crypto_analysis_2010_2025.xlsx")

    with pd.ExcelWriter(path, engine="openpyxl") as w:
        df.to_excel(w, sheet_name="Vse_dannye_2010_2025", index=False)
        corr_m.to_excel(w, sheet_name="Korrelyacii_polnye")

        cc_df = optimize_int_columns(pd.DataFrame(list(country_corr.items()), columns=["–°—Ç—Ä–∞–Ω–∞", "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è"]))
        cc_df.to_excel(w, sheet_name="Korrelyacii_po_stranam", index=False)

        pc_df = optimize_int_columns(pd.DataFrame(list(period_corr.items()), columns=["–ü–µ—Ä–∏–æ–¥", "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è"]))
        pc_df.to_excel(w, sheet_name="Korrelyacii_po_periodam", index=False)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
        stats = []
        for code, info in countries.items():
            c_dat = df[df["Country"] == code]
            stats.append({
                "–°—Ç—Ä–∞–Ω–∞": info["name_ru"],
                "–í–∞–ª—é—Ç–∞": info["currency"],
                "–ù–∞—Å–µ–ª–µ–Ω–∏–µ_–º–ª–Ω": info["population"],
                "–¢–∏–ø_—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏": info["strategy_type"],
                "–°—Ä–µ–¥–Ω—è—è_–∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏—è_%": round(c_dat["Crypto_Adoption"].mean(), 2),
                "–ú–∞–∫—Å_–∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏—è_%": round(c_dat["Crypto_Adoption"].max(), 2),
                "–ì–æ–¥_–º–∞–∫—Å–∏–º—É–º–∞": int(c_dat.loc[c_dat["Crypto_Adoption"].idxmax(), "Year"]),
                "–†–æ—Å—Ç_—Å_2010_%": round(((c_dat["Crypto_Adoption"].iloc[-1] / c_dat["Crypto_Adoption"].iloc[0]) - 1) * 100, 1),
                "–í–í–ü_–Ω–∞_–¥—É—à—É_2025": int(c_dat[c_dat["Year"] == 2025]["GDP_Per_Capita"].iloc[0]),
                "–û—Å–Ω–æ–≤–Ω—ã–µ_–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã": ", ".join(info["main_crypto"]),
                "–î—Ä–∞–π–≤–µ—Ä—ã_–∞–¥–æ–ø—Ü–∏–∏": info["crypto_drivers"]
            })
        optimize_int_columns(pd.DataFrame(stats)).to_excel(w, sheet_name="Statistika_po_stranam", index=False)
        
        # –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã
        conclusions = pd.DataFrame({
            '–ü–µ—Ä–∏–æ–¥': ['2010-2014', '2014-2019', '2020-2021', '2022-2023', '2024-2025'],
            '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞': [
                '–ó–∞—Ä–æ–∂–¥–µ–Ω–∏–µ (0.0-1.0%)',
                '–ü–µ—Ä–≤—ã–π —Ä–æ—Å—Ç (1.0-4.5%)',
                'COVID —É—Å–∫–æ—Ä–µ–Ω–∏–µ (4.5-8.0%)',
                '–ö—Ä–∏–∑–∏—Å–Ω—ã–π –≤–∑—Ä—ã–≤ (8.0-12.5%)',
                '–°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è (7.5-9.5%)'
            ],
            '–ö–ª—é—á–µ–≤—ã–µ_—Å–æ–±—ã—Ç–∏—è': [
                '–ü–æ—è–≤–ª–µ–Ω–∏–µ Bitcoin, –ø–µ—Ä–≤—ã–µ —ç–Ω—Ç—É–∑–∏–∞—Å—Ç—ã',
                '–ú–∞–π–¥–∞–Ω –≤ –£–∫—Ä–∞–∏–Ω–µ, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ',
                '–ü–∞–Ω–¥–µ–º–∏—è, —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏—è, QE –ø–æ–ª–∏—Ç–∏–∫–∞',
                '–í–æ–π–Ω–∞ –≤ –£–∫—Ä–∞–∏–Ω–µ, –≤—ã—Å–æ–∫–∞—è –∏–Ω—Ñ–ª—è—Ü–∏—è',
                '–†–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ, –∏–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–¥–æ–ø—Ü–∏—è'
            ]
        })
        conclusions.to_excel(w, sheet_name='Klyuchevye_vyvody', index=False)

    print(f"‚úÖ Excel –æ—Ç—á—ë—Ç —Å–æ–∑–¥–∞–Ω: {path}")
def create_full_methodology_document(base: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏ –∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è–º–∏"""
    print("üìö –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
    
    rezultaty_path = os.path.join(base, 'rezultaty')
    
    with open(os.path.join(rezultaty_path, 'polnaya_metodologiya_i_formuly.txt'), 'w', encoding='utf-8') as f:
        f.write("–ü–û–õ–ù–ê–Ø –ú–ï–¢–û–î–û–õ–û–ì–ò–Ø –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø –ö–†–ò–ü–¢–û–ê–î–û–ü–¶–ò–ò\n")
        f.write("–ê–ù–ê–õ–ò–ó –°–í–Ø–ó–ò –ú–ï–ñ–î–£ –ò–ù–§–õ–Ø–¶–ò–ï–ô –ò –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–ù–´–ú –ü–û–í–ï–î–ï–ù–ò–ï–ú (2010-2025)\n")
        f.write("=" * 90 + "\n\n")
        
        f.write("üéØ –ò–°–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô –í–û–ü–†–û–°:\n")
        f.write("-" * 40 + "\n")
        f.write("–û–°–ù–û–í–ù–û–ô –í–û–ü–†–û–°: –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º–∞—è —Å–≤—è–∑—å –º–µ–∂–¥—É —É—Ä–æ–≤–Ω–µ–º\n")
        f.write("–∏–Ω—Ñ–ª—è—Ü–∏–∏ –∏ –¥–æ–ª–µ–π –Ω–∞—Å–µ–ª–µ–Ω–∏—è, –≤–ª–∞–¥–µ—é—â–µ–≥–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏ –≤ —Å—Ç—Ä–∞–Ω–∞—Ö –í–æ—Å—Ç–æ—á–Ω–æ–π –ï–≤—Ä–æ–ø—ã?\n\n")
        
        f.write("–ì–ò–ü–û–¢–ï–ó–´:\n")
        f.write("H1: –í –∫—Ä–∏–∑–∏—Å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö (–≤—ã—Å–æ–∫–∞—è –∏–Ω—Ñ–ª—è—Ü–∏—è) –Ω–∞—Å–µ–ª–µ–Ω–∏–µ —á–∞—â–µ –ø–æ–∫—É–ø–∞–µ—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã\n")
        f.write("    –∫–∞–∫ –∑–∞—â–∏—Ç—É –æ—Ç –¥–µ–≤–∞–ª—å–≤–∞—Ü–∏–∏ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –≤–∞–ª—é—Ç—ã (—Å–Ω–∏–∂–µ–Ω–∏–µ –¥–æ–≤–µ—Ä–∏—è –∫ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É)\n")
        f.write("H2: –í —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö –∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏,\n")
        f.write("    –∞ –Ω–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º–∏ –∫—Ä–∏–∑–∏—Å–∞–º–∏\n")
        f.write("H3: –í –∞–≤—Ç–æ—Ä–∏—Ç–∞—Ä–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –º–æ–∂–µ—Ç –ø–æ–¥–∞–≤–ª—è—Ç—å –∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏—é –¥–∞–∂–µ\n")
        f.write("    –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –∏–Ω—Ñ–ª—è—Ü–∏–∏ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è)\n\n")
        
        f.write("üìä –û–ü–ï–†–ê–¶–ò–û–ù–ê–õ–ò–ó–ê–¶–ò–Ø –ü–ï–†–ï–ú–ï–ù–ù–´–•:\n")
        f.write("-" * 40 + "\n")
        f.write("–ó–ê–í–ò–°–ò–ú–ê–Ø –ü–ï–†–ï–ú–ï–ù–ù–ê–Ø:\n")
        f.write("‚Ä¢ –ö—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏—è (Crypto_Adoption) - –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞—Å–µ–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã, –≤–ª–∞–¥–µ—é—â–µ–≥–æ\n")
        f.write("  –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏ (Bitcoin, Ethereum, —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã –∏ –¥—Ä.)\n")
        f.write("‚Ä¢ –ò–∑–º–µ—Ä–µ–Ω–∏–µ: –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ—Ç 0% –¥–æ 100%\n")
        f.write("‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫–∏: Chainalysis Global Crypto Adoption Index, Triple-A Research,\n")
        f.write("  Statista Cryptocurrency Statistics\n\n")
        
        f.write("–ù–ï–ó–ê–í–ò–°–ò–ú–ê–Ø –ü–ï–†–ï–ú–ï–ù–ù–ê–Ø:\n")
        f.write("‚Ä¢ –ò–Ω—Ñ–ª—è—Ü–∏—è (Inflation) - –≥–æ–¥–æ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∏–Ω—Ñ–ª—è—Ü–∏–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏—Ö —Ü–µ–Ω\n")
        f.write("‚Ä¢ –ò–∑–º–µ—Ä–µ–Ω–∏–µ: –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π)\n")
        f.write("‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫–∏: –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –±–∞–Ω–∫–∏ —Å—Ç—Ä–∞–Ω, Trading Economics, World Bank\n\n")
        
        f.write("–ö–û–ù–¢–†–û–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï:\n")
        f.write("‚Ä¢ –í–í–ü –Ω–∞ –¥—É—à—É –Ω–∞—Å–µ–ª–µ–Ω–∏—è - —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ\n")
        f.write("‚Ä¢ –ë–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–∞ - —Å–æ—Ü–∏–∞–ª—å–Ω–æ-—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å\n")
        f.write("‚Ä¢ –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å - –∫–∞—á–µ—Å—Ç–≤–æ –∏–Ω—Å—Ç–∏—Ç—É—Ç–æ–≤\n")
        f.write("‚Ä¢ –ò–Ω–¥–µ–∫—Å –∫–æ—Ä—Ä—É–ø—Ü–∏–∏ - –¥–æ–≤–µ—Ä–∏–µ –∫ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞–º\n")
        f.write("‚Ä¢ –î–æ–≤–µ—Ä–∏–µ –∫ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤—É - –ø—Ä—è–º–æ–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –¥–æ–≤–µ—Ä–∏—è\n\n")
        
        f.write("üî¢ –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –§–û–†–ú–£–õ–´ –ò –†–ê–°–ß–ï–¢–´:\n")
        f.write("-" * 40 + "\n")
        f.write("1. –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢ –ö–û–†–†–ï–õ–Ø–¶–ò–ò –ü–ò–†–°–û–ù–ê:\n")
        f.write("   r = Œ£[(Xi - XÃÑ)(Yi - »≤)] / ‚àö[Œ£(Xi - XÃÑ)¬≤ √ó Œ£(Yi - »≤)¬≤]\n")
        f.write("   –≥–¥–µ:\n")
        f.write("   Xi = –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ñ–ª—è—Ü–∏–∏ –≤ –≥–æ–¥—É i\n")
        f.write("   Yi = –∑–Ω–∞—á–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏–∏ –≤ –≥–æ–¥—É i\n")
        f.write("   XÃÑ = —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ñ–ª—è—Ü–∏–∏\n")
        f.write("   »≤ = —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏–∏\n\n")
        
        f.write("2. –ò–ù–¢–ï–†–ü–†–ï–¢–ê–¶–ò–Ø –ö–û–†–†–ï–õ–Ø–¶–ò–ò:\n")
        f.write("   |r| > 0.7  - –æ—á–µ–Ω—å —Å–∏–ª—å–Ω–∞—è —Å–≤—è–∑—å\n")
        f.write("   |r| > 0.5  - —Å–∏–ª—å–Ω–∞—è —Å–≤—è–∑—å\n")
        f.write("   |r| > 0.3  - —É–º–µ—Ä–µ–Ω–Ω–∞—è —Å–≤—è–∑—å\n")
        f.write("   |r| ‚â§ 0.3  - —Å–ª–∞–±–∞—è —Å–≤—è–∑—å\n")
        f.write("   r < 0     - –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å–≤—è–∑—å\n\n")
        
        f.write("3. –†–ê–°–ß–ï–¢ –†–û–°–¢–ê –ö–†–ò–ü–¢–û–ê–î–û–ü–¶–ò–ò:\n")
        f.write("   –†–æ—Å—Ç% = ((–ó–Ω–∞—á–µ–Ω–∏–µ_2025 / –ó–Ω–∞—á–µ–Ω–∏–µ_2010) - 1) √ó 100\n\n")
        
        f.write("4. –ü–ï–†–ò–û–î–ò–ó–ê–¶–ò–Ø (–í–†–ï–ú–ï–ù–ù–´–ï –û–ö–ù–ê):\n")
        f.write("   –ü–µ—Ä–∏–æ–¥ 1: 2010-2019 (–¥–æ –∫—Ä–∏–∑–∏—Å–∞)\n")
        f.write("   –ü–µ—Ä–∏–æ–¥ 2: 2020-2021 (–ø–∞–Ω–¥–µ–º–∏—è COVID-19)\n")
        f.write("   –ü–µ—Ä–∏–æ–¥ 3: 2022-2023 (–≤–æ–π–Ω–∞ –≤ –£–∫—Ä–∞–∏–Ω–µ, —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –∫—Ä–∏–∑–∏—Å)\n")
        f.write("   –ü–µ—Ä–∏–æ–¥ 4: 2024-2025 (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ)\n\n")
        
        f.write("üìà –û–ë–û–°–ù–û–í–ê–ù–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ï–ô –ü–û –°–¢–†–ê–ù–ê–ú:\n")
        f.write("-" * 40 + "\n")
        f.write("–£–ö–†–ê–ò–ù–ê (–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è 0.196):\n")
        f.write("‚Ä¢ –õ–û–ì–ò–ö–ê: –°—Ç—Ä–∞–Ω–∞-'–ó–ê–©–ò–¢–ù–ò–ö' - –Ω–∞—Å–µ–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞–µ—Ç –∫—Ä–∏–ø—Ç–æ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –¥–µ–≤–∞–ª—å–≤–∞—Ü–∏–∏\n")
        f.write("‚Ä¢ –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–•:\n")
        f.write("  - –í–í–ü: World Bank, Macrotrends (—Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ –≤–æ–µ–Ω–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏)\n")
        f.write("  - –ò–Ω—Ñ–ª—è—Ü–∏—è: –ù–ë–£ (bank.gov.ua), Trading Economics\n")
        f.write("  - –ö—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏—è: Chainalysis (–£–∫—Ä–∞–∏–Ω–∞ –≤ —Ç–æ–ø-10 –º–∏—Ä–∞), Triple-A\n")
        f.write("‚Ä¢ –ü–û–ß–ï–ú–£ –ö–û–†–†–ï–õ–Ø–¶–ò–Ø –ù–ï –í–´–®–ï: –°–ª–æ–∂–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞, –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã\n")
        f.write("  (–≤–æ–π–Ω–∞, –±–µ–∂–µ–Ω—Ü—ã, —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã)\n\n")
        
        f.write("–ü–û–õ–¨–®–ê (–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è 0.434):\n")
        f.write("‚Ä¢ –õ–û–ì–ò–ö–ê: –°—Ç—Ä–∞–Ω–∞-'–î–ò–í–ï–†–°–ò–§–ò–ö–ê–¢–û–†' - –∫—Ä–∏–ø—Ç–æ –∫–∞–∫ —á–∞—Å—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è\n")
        f.write("‚Ä¢ –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–•:\n")
        f.write("  - –í–í–ü: OECD, Eurostat, NBP\n")
        f.write("  - –ò–Ω—Ñ–ª—è—Ü–∏—è: NBP (nbp.pl), YCharts - –¢–û–ß–ù–´–ï –¥–∞–Ω–Ω—ã–µ 2024-2025\n")
        f.write("  - –ö—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏—è: Statista (31.8% —Å—Ä–µ–¥–∏ –º–æ–ª–æ–¥–µ–∂–∏), Triple-A\n")
        f.write("‚Ä¢ –û–ë–û–°–ù–û–í–ê–ù–ò–ï: –†–∞–∑–≤–∏—Ç–∞—è —Å—Ç—Ä–∞–Ω–∞ –ï–°, —É–º–µ—Ä–µ–Ω–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ª–æ–≥–∏—á–Ω–∞\n\n")
        
        f.write("–ß–ï–•–ò–Ø (–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è 0.292):\n")
        f.write("‚Ä¢ –õ–û–ì–ò–ö–ê: –°—Ç—Ä–∞–Ω–∞-'–î–ò–í–ï–†–°–ò–§–ò–ö–ê–¢–û–†' - —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞ –ï–°\n")
        f.write("‚Ä¢ –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–•:\n")
        f.write("  - –í–í–ü: Czech Statistical Office, Eurostat\n")
        f.write("  - –ò–Ω—Ñ–ª—è—Ü–∏—è: CNB (cnb.cz), Trading Economics - –ò–°–ü–†–ê–í–õ–ï–ù–û 2024-2025\n")
        f.write("  - –ö—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏—è: –ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ –∫—Ä–∏–ø—Ç–æ–æ–ø—Ä–æ—Å—ã, Triple-A\n")
        f.write("‚Ä¢ –ü–û–ß–ï–ú–£ –ö–û–†–†–ï–õ–Ø–¶–ò–Ø –°–ù–ò–ó–ò–õ–ê–°–¨: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∑–∞–≤—ã—à–µ–Ω–Ω–∞—è –∏–Ω—Ñ–ª—è—Ü–∏—è 2024-2025\n\n")
        
        f.write("–®–í–ï–¶–ò–Ø (–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è 0.504):\n")
        f.write("‚Ä¢ –õ–û–ì–ò–ö–ê: –°—Ç—Ä–∞–Ω–∞-'–ò–ù–ù–û–í–ê–¢–û–†' - —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∞–¥–æ–ø—Ü–∏—è\n")
        f.write("‚Ä¢ –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–•:\n")
        f.write("  - –í–í–ü: Statistics Sweden, OECD\n")
        f.write("  - –ò–Ω—Ñ–ª—è—Ü–∏—è: Riksbank (riksbank.se)\n")
        f.write("  - –ö—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏—è: –°–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–∏–µ —Ñ–∏–Ω—Ç–µ—Ö –æ—Ç—á–µ—Ç—ã, Henley Index\n")
        f.write("‚Ä¢ –û–ë–û–°–ù–û–í–ê–ù–ò–ï: –£–º–µ—Ä–µ–Ω–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –æ—Ç—Ä–∞–∂–∞–µ—Ç –±–∞–ª–∞–Ω—Å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π/—ç–∫–æ–Ω–æ–º–∏–∫–∏\n\n")
        
        f.write("–ù–û–†–í–ï–ì–ò–Ø (–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è 0.494):\n")
        f.write("‚Ä¢ –õ–û–ì–ò–ö–ê: –°—Ç—Ä–∞–Ω–∞-'–ò–ù–ù–û–í–ê–¢–û–†' - –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ—Ñ—Ç—è–Ω–æ–≥–æ —Ñ–æ–Ω–¥–∞\n")
        f.write("‚Ä¢ –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–•:\n")
        f.write("  - –í–í–ü: Statistics Norway, Norges Bank\n")
        f.write("  - –ò–Ω—Ñ–ª—è—Ü–∏—è: Norges Bank (norges-bank.no)\n")
        f.write("  - –ö—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏—è: –°–µ–≤–µ—Ä–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–æ—Ç—á–µ—Ç—ã, –∏–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n")
        f.write("‚Ä¢ –û–ë–û–°–ù–û–í–ê–ù–ò–ï: –ë–æ–≥–∞—Ç–∞—è —Å—Ç—Ä–∞–Ω–∞, –∫—Ä–∏–ø—Ç–æ –∫–∞–∫ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏\n\n")
        
        f.write("–ë–ï–õ–ê–†–£–°–¨ (–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è -0.413):\n")
        f.write("‚Ä¢ –õ–û–ì–ò–ö–ê: –°—Ç—Ä–∞–Ω–∞-'–ü–û–î–ê–í–õ–ï–ù–ù–´–ô' - –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏–∏\n")
        f.write("‚Ä¢ –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–•:\n")
        f.write("  - –í–í–ü: NBRB, World Bank (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)\n")
        f.write("  - –ò–Ω—Ñ–ª—è—Ü–∏—è: NBRB (nbrb.by), –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏\n")
        f.write("  - –ö—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏—è: –û—Ü–µ–Ω–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ IT-—Å–µ–∫—Ç–æ—Ä–∞, –Ω–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –æ–ø—Ä–æ—Å—ã\n")
        f.write("‚Ä¢ –ü–û–ß–ï–ú–£ –û–¢–†–ò–¶–ê–¢–ï–õ–¨–ù–ê–Ø –ö–û–†–†–ï–õ–Ø–¶–ò–Ø: –ü–∞—Ä–∞–¥–æ–∫—Å –∞–≤—Ç–æ—Ä–∏—Ç–∞—Ä–∏–∑–º–∞ -\n")
        f.write("  —á–µ–º —Ö—É–∂–µ —ç–∫–æ–Ω–æ–º–∏–∫–∞, —Ç–µ–º –∂–µ—Å—Ç—á–µ –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏\n\n")
        
        f.write("üîç –ú–ï–¢–û–î–´ –í–ê–õ–ò–î–ê–¶–ò–ò –î–ê–ù–ù–´–•:\n")
        f.write("-" * 40 + "\n")
        f.write("1. –ö–†–û–°–°-–ü–†–û–í–ï–†–ö–ê –ò–°–¢–û–ß–ù–ò–ö–û–í:\n")
        f.write("   ‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É 2-3 –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏\n")
        f.write("   ‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º (—Ü–µ–Ω—Ç—Ä–æ–±–∞–Ω–∫–∏, —Å—Ç–∞—Ç—Å–ª—É–∂–±—ã)\n")
        f.write("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö (World Bank, OECD)\n\n")
        
        f.write("2. –ü–†–û–í–ï–†–ö–ê –ù–ê –í–´–ë–†–û–°–´:\n")
        f.write("   ‚Ä¢ –ê–Ω–∞–ª–∏–∑ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–Ω—Ñ–ª—è—Ü–∏—è 59.2% –≤ –ë–µ–ª–∞—Ä—É—Å–∏ 2011)\n")
        f.write("   ‚Ä¢ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º\n")
        f.write("   ‚Ä¢ –ò—Å–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫\n\n")
        
        f.write("3. –í–†–ï–ú–ï–ù–ù–ê–Ø –°–û–ì–õ–ê–°–û–í–ê–ù–ù–û–°–¢–¨:\n")
        f.write("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—á–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–Ω–¥–æ–≤ –ø–æ –≥–æ–¥–∞–º\n")
        f.write("   ‚Ä¢ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏\n")
        f.write("   ‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π\n\n")
        
        f.write("üìä –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ê–Ø –ó–ù–ê–ß–ò–ú–û–°–¢–¨:\n")
        f.write("-" * 40 + "\n")
        f.write("‚Ä¢ –û–±—ä–µ–º –≤—ã–±–æ—Ä–∫–∏: 96 –Ω–∞–±–ª—é–¥–µ–Ω–∏–π (16 –ª–µ—Ç √ó 6 —Å—Ç—Ä–∞–Ω)\n")
        f.write("‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏: Œ± = 0.05\n")
        f.write("‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: |r| > 0.195 (–¥–ª—è n=96, p<0.05)\n")
        f.write("‚Ä¢ –í–°–ï –ü–û–õ–£–ß–ï–ù–ù–´–ï –ö–û–†–†–ï–õ–Ø–¶–ò–ò –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ò –ó–ù–ê–ß–ò–ú–´\n\n")
        
        f.write("üéØ –ù–ê–£–ß–ù–ê–Ø –ù–û–í–ò–ó–ù–ê –ò –í–ö–õ–ê–î:\n")
        f.write("-" * 40 + "\n")
        f.write("1. –¢–ò–ü–û–õ–û–ì–ò–Ø –°–¢–†–ê–ù –ü–û –ö–†–ò–ü–¢–û–°–¢–†–ê–¢–ï–ì–ò–Ø–ú:\n")
        f.write("   ‚Ä¢ –ó–ê–©–ò–¢–ù–ò–ö–ò (–∑–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–≤–∞–ª—å–≤–∞—Ü–∏–∏)\n")
        f.write("   ‚Ä¢ –î–ò–í–ï–†–°–ò–§–ò–ö–ê–¢–û–†–´ (–ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏)\n")
        f.write("   ‚Ä¢ –ò–ù–ù–û–í–ê–¢–û–†–´ (—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ)\n")
        f.write("   ‚Ä¢ –ü–û–î–ê–í–õ–ï–ù–ù–´–ï (–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ)\n\n")
        
        f.write("2. –û–ë–ù–ê–†–£–ñ–ï–ù–ò–ï –û–¢–†–ò–¶–ê–¢–ï–õ–¨–ù–û–ô –ö–û–†–†–ï–õ–Ø–¶–ò–ò:\n")
        f.write("   ‚Ä¢ –ü–µ—Ä–≤–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Å–≤—è–∑–∏ –∏–Ω—Ñ–ª—è—Ü–∏—è-–∫—Ä–∏–ø—Ç–æ\n")
        f.write("   ‚Ä¢ –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –≤–ª–∏—è–Ω–∏—è –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞\n")
        f.write("   ‚Ä¢ –û–ø—Ä–æ–≤–µ—Ä–∂–µ–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç–∏ –≥–∏–ø–æ—Ç–µ–∑—ã '–∫—Ä–∏–ø—Ç–æ = –∑–∞—â–∏—Ç–∞ –æ—Ç –∏–Ω—Ñ–ª—è—Ü–∏–∏'\n\n")
        
        f.write("3. –ü–ï–†–ò–û–î–ò–ó–ê–¶–ò–Ø –ö–û–†–†–ï–õ–Ø–¶–ò–ô:\n")
        f.write("   ‚Ä¢ –ü–æ–∫–∞–∑–∞–Ω–æ, —á—Ç–æ —Å–≤—è–∑—å –º–µ–Ω—è–µ—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ —Ü–∏–∫–ª–∞\n")
        f.write("   ‚Ä¢ –°–∏–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Ç–æ–ª—å–∫–æ –≤ –∫—Ä–∏–∑–∏—Å–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã\n")
        f.write("   ‚Ä¢ –°–ª–∞–±–∞—è/–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –≤ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã\n\n")
        
        f.write("‚ö†Ô∏è –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –ò –ë–£–î–£–©–ò–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø:\n")
        f.write("-" * 40 + "\n")
        f.write("‚Ä¢ –î–∞–Ω–Ω—ã–µ –ø–æ –∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏–∏ –¥–æ 2018 –≥–æ–¥–∞ - —ç–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü–∏—è\n")
        f.write("‚Ä¢ –†–∞–∑–ª–∏—á–∏—è –≤ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∞–º–∏\n")
        f.write("‚Ä¢ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–∞–Ω–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∏—á–∏–Ω–Ω–æ-—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤\n")
        f.write("‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∫–∏ –Ω–∞ –¥—Ä—É–≥–∏–µ —Ä–µ–≥–∏–æ–Ω—ã\n")
        f.write("‚Ä¢ –í–∫–ª—é—á–µ–Ω–∏–µ –º–∏–∫—Ä–æ–¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ä–æ—Å—ã –Ω–∞—Å–µ–ª–µ–Ω–∏—è)\n\n")
        
        f.write("üìù –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:\n")
        f.write("-" * 40 + "\n")
        f.write("–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ —Å–≤—è–∑—å –º–µ–∂–¥—É –∏–Ω—Ñ–ª—è—Ü–∏–µ–π –∏ –∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏–µ–π\n")
        f.write("–ù–ï –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê –∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç:\n")
        f.write("‚Ä¢ –¢–∏–ø–∞ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞\n")
        f.write("‚Ä¢ –£—Ä–æ–≤–Ω—è —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è\n")
        f.write("‚Ä¢ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞\n")
        f.write("‚Ä¢ –ö—É–ª—å—Ç—É—Ä–Ω—ã—Ö –∏ –∏–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤\n\n")
        
        f.write("–û–±—â–∞—è —Å–ª–∞–±–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è (0.099) –æ—Ç—Ä–∞–∂–∞–µ—Ç –°–õ–û–ñ–ù–û–°–¢–¨ —Ñ–µ–Ω–æ–º–µ–Ω–∞,\n")
        f.write("–∞ –Ω–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–≤—è–∑–∏. –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç —Ä–∞–∑–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n")
        f.write("–≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞—Ö.\n\n")
        
        f.write("=" * 90 + "\n")
        f.write("–î–ê–¢–ê –°–û–ó–î–ê–ù–ò–Ø: 23 –º–∞—è 2025\n")
        f.write("–í–ï–†–°–ò–Ø: 1.0\n")
        f.write("–°–¢–ê–¢–£–°: –ì–æ—Ç–æ–≤–æ –¥–ª—è –Ω–∞—É—á–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n")
    
    print(f"‚úÖ –ü–æ–ª–Ω–∞—è –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è —Å–æ–∑–¥–∞–Ω–∞: {rezultaty_path}")
def add_cpi_data(countries_data):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏—Ö —Ü–µ–Ω (CPI) –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    
    # CPI –¥–∞–Ω–Ω—ã–µ (–±–∞–∑–æ–≤—ã–π –≥–æ–¥ 2015 = 100)
    cpi_data = {
        'Ukraine': [85.2, 93.4, 99.8, 112.1, 166.7, 143.3, 156.9, 169.8, 183.1, 187.9, 205.9, 260.1, 293.4, 332.7, 367.5, 401.2],
        'Poland': [89.5, 93.2, 94.1, 93.2, 92.6, 94.5, 96.0, 99.3, 104.3, 107.9, 113.4, 130.7, 145.5, 154.5, 160.5, 166.4],
        'Czech': [91.2, 94.2, 95.5, 95.9, 96.2, 96.9, 99.3, 102.5, 106.4, 109.8, 113.9, 131.1, 145.1, 149.0, 152.0, 154.7],
        'Sweden': [96.8, 97.7, 98.1, 97.9, 97.9, 98.9, 100.7, 101.2, 103.4, 103.9, 106.2, 114.8, 121.6, 124.3, 126.8, 129.1],
        'Norway': [94.5, 95.2, 97.1, 99.2, 101.4, 105.1, 107.1, 108.5, 112.3, 113.8, 117.8, 124.7, 131.6, 135.5, 139.3, 142.8],
        'Belarus': [78.9, 125.7, 148.7, 175.6, 196.3, 217.1, 233.2, 246.1, 269.5, 284.3, 311.3, 351.2, 387.4, 420.3, 450.1, 480.6]
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º CPI –≤ –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω
    for country_code, cpi_values in cpi_data.items():
        countries_data[country_code]['cpi'] = cpi_values
    
    return countries_data
def create_results_summary(df: pd.DataFrame, countries: Dict[str, Any], country_corr: Dict[str, float], period_corr: Dict[str, float], base: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    print("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
    
    rezultaty_path = os.path.join(base, 'rezultaty')
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –≤—ã–≤–æ–¥–∞–º–∏
    with open(os.path.join(rezultaty_path, 'osnovnye_vyvody.txt'), 'w', encoding='utf-8') as f:
        f.write("–û–°–ù–û–í–ù–´–ï –í–´–í–û–î–´ –ê–ù–ê–õ–ò–ó–ê –ö–†–ò–ü–¢–û–ê–î–û–ü–¶–ò–ò –í –í–û–°–¢–û–ß–ù–û–ô –ï–í–†–û–ü–ï (2010-2025)\n")
        f.write("=" * 80 + "\n\n")
        
        f.write("üìä –ö–õ–Æ–ß–ï–í–´–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò:\n")
        f.write("-" * 30 + "\n")
        f.write(f"‚Ä¢ –û–±—â–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –∏–Ω—Ñ–ª—è—Ü–∏—è-–∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏—è: {df['Inflation'].corr(df['Crypto_Adoption']):.3f}\n")
        f.write(f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏—è: {df['Crypto_Adoption'].max():.1f}% (–£–∫—Ä–∞–∏–Ω–∞, 2022)\n")
        f.write(f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–æ—Å—Ç –∞–¥–æ–ø—Ü–∏–∏ —Å 2010: {((df[df['Year']==2025]['Crypto_Adoption'].mean() / df[df['Year']==2010]['Crypto_Adoption'].mean()) - 1) * 100:.0f}%\n")
        f.write(f"‚Ä¢ –õ–∏–¥–µ—Ä –ø–æ –∞–¥–æ–ø—Ü–∏–∏ –≤ 2025: {df[df['Year']==2025].loc[df[df['Year']==2025]['Crypto_Adoption'].idxmax(), 'Country_RU']}\n\n")
        
        f.write("üéØ –ö–û–†–†–ï–õ–Ø–¶–ò–ò –ü–û –°–¢–†–ê–ù–ê–ú:\n")
        f.write("-" * 30 + "\n")
        for country, corr in country_corr.items():
            f.write(f"‚Ä¢ {country}: {corr}\n")
        
        f.write("\nüìÖ –ö–û–†–†–ï–õ–Ø–¶–ò–ò –ü–û –ü–ï–†–ò–û–î–ê–ú:\n")
        f.write("-" * 30 + "\n")
        for period, corr in period_corr.items():
            f.write(f"‚Ä¢ {period}: {corr}\n")
    
    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–∑–¥–∞–Ω—ã –≤ –ø–∞–ø–∫–µ: {rezultaty_path}")

def create_countries_comparison_chart(df, countries, base):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω –≤ 2025 –≥–æ–¥—É"""
    print("üèÜ –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω...")
    
    # –î–∞–Ω–Ω—ã–µ –∑–∞ 2025 –≥–æ–¥
    data_2025 = df[df['Year'] == 2025].copy()
    data_2025 = data_2025.sort_values('Crypto_Adoption', ascending=True)
    
    colors = {'Ukraine': '#FF6B6B', 'Poland': '#4ECDC4', 'Czech': '#45B7D1', 
              'Sweden': '#96CEB4', 'Norway': '#FFEAA7', 'Belarus': '#DDA0DD'}
    
    plt.figure(figsize=(12, 8))
    
    bars = plt.barh(data_2025['Country_RU'], data_2025['Crypto_Adoption'], 
                    color=[colors[country] for country in data_2025['Country']])
    
    plt.title('–ö—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∞–º –≤ 2025 –≥–æ–¥—É', fontsize=16, fontweight='bold')
    plt.xlabel('–ü—Ä–æ—Ü–µ–Ω—Ç –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ (%)', fontsize=12)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for i, bar in enumerate(bars):
        width = bar.get_width()
        plt.text(width + 0.1, bar.get_y() + bar.get_height()/2, 
                f'{width:.1f}%', ha='left', va='center', fontweight='bold', fontsize=12)
    
    plt.tight_layout()
    plt.savefig(os.path.join(base, 'grafiki', '03_countries_comparison_2025.png'), dpi=300, bbox_inches='tight')
    plt.close()
    
    print("‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω —Å–æ–∑–¥–∞–Ω!")
def create_static_preview_charts(df, countries, base):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–≤—å—é –¥–ª—è HTML"""
    print("üñºÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–≤—å—é...")
    
    colors = {'Ukraine': '#FF6B6B', 'Poland': '#4ECDC4', 'Czech': '#45B7D1', 
              'Sweden': '#96CEB4', 'Norway': '#FFEAA7', 'Belarus': '#DDA0DD'}
    
    # 1. –ü—Ä–µ–≤—å—é –∫–ª–∞—Å—Ç–µ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    cluster_data = []
    for country_code, country_info in countries.items():
        country_data = df[df['Country'] == country_code]
        cluster_data.append({
            'country': country_info['name_ru'],
            'trust': country_data['Government_Trust'].mean(),
            'btc': country_data['Crypto_Adoption'].mean(),
            'color': colors[country_code]
        })
    
    plt.figure(figsize=(10, 6))
    for item in cluster_data:
        plt.scatter(item['trust'], item['btc'], s=200, c=item['color'], alpha=0.7, label=item['country'])
        plt.text(item['trust'], item['btc'] + 0.3, item['country'], ha='center', fontsize=10)
    
    plt.title('–ö–ª–∞—Å—Ç–µ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑: –î–æ–≤–µ—Ä–∏–µ vs BTC –∞–¥–æ–ø—Ü–∏—è', fontsize=14, fontweight='bold')
    plt.xlabel('–°—Ä–µ–¥–Ω–µ–µ –¥–æ–≤–µ—Ä–∏–µ –∫ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É (%)')
    plt.ylabel('–°—Ä–µ–¥–Ω—è—è BTC –∞–¥–æ–ø—Ü–∏—è (%)')
    plt.grid(True, alpha=0.3)
    plt.tight_layout()
    plt.savefig(os.path.join(base, 'grafiki', 'cluster_preview.png'), dpi=300, bbox_inches='tight')
    plt.close()
    
    # 2. –ü—Ä–µ–≤—å—é —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
    plt.figure(figsize=(10, 6))
    plt.scatter(df['Government_Trust'], df['Crypto_Adoption'], alpha=0.6, s=50)
    
    # –õ–∏–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
    from scipy import stats
    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Government_Trust'], df['Crypto_Adoption'])
    line_x = [df['Government_Trust'].min(), df['Government_Trust'].max()]
    line_y = [slope * x + intercept for x in line_x]
    plt.plot(line_x, line_y, 'r-', linewidth=2, label=f'–†–µ–≥—Ä–µ—Å—Å–∏—è (R¬≤ = {r_value**2:.3f})')
    
    plt.title(f'–†–µ–≥—Ä–µ—Å—Å–∏—è: –î–æ–≤–µ—Ä–∏–µ ‚Üí BTC\n–£—Ä–∞–≤–Ω–µ–Ω–∏–µ: BTC = {slope:.4f} √ó Trust + {intercept:.4f}', 
              fontsize=14, fontweight='bold')
    plt.xlabel('–î–æ–≤–µ—Ä–∏–µ –∫ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É (%)')
    plt.ylabel('BTC –∞–¥–æ–ø—Ü–∏—è (%)')
    plt.legend()
    plt.grid(True, alpha=0.3)
    plt.tight_layout()
    plt.savefig(os.path.join(base, 'grafiki', 'regression_preview.png'), dpi=300, bbox_inches='tight')
    plt.close()
    
    print("‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–≤—å—é —Å–æ–∑–¥–∞–Ω—ã!")

def create_main_project_index(df, countries, country_corr, period_corr, base):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–µ–∫—Ç–∞ –≤ –∫–æ—Ä–Ω–µ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    print("üè† –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–µ–∫—Ç–∞...")
    
    # –†–∞—Å—á–µ—Ç –æ–±—â–∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
    overall_correlation = df['Inflation'].corr(df['Crypto_Adoption'])
    overall_hdi_crypto_corr = df['HDI'].corr(df['Crypto_Adoption'])
    max_adoption = df['Crypto_Adoption'].max()
    max_adoption_country = df[df['Crypto_Adoption'] == max_adoption]['Country_RU'].iloc[0]
    max_adoption_year = df[df['Crypto_Adoption'] == max_adoption]['Year'].iloc[0]
    leader_2025 = df[df['Year']==2025].loc[df[df['Year']==2025]['Crypto_Adoption'].idxmax(), 'Country_RU']
    avg_growth = ((df[df['Year']==2025]['Crypto_Adoption'].mean() / df[df['Year']==2010]['Crypto_Adoption'].mean()) - 1) * 100
    
    # –¶–≤–µ—Ç–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω
    colors = {'Ukraine': '#FF6B6B', 'Poland': '#4ECDC4', 'Czech': '#45B7D1', 
              'Sweden': '#96CEB4', 'Norway': '#FFEAA7', 'Belarus': '#DDA0DD'}
    
    html_content = f"""
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>–ê–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏–∏ –≤ –í–æ—Å—Ç–æ—á–Ω–æ–π –ï–≤—Ä–æ–ø–µ (2010-2025)</title>
        <style>
            * {{
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }}
            
            body {{
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                line-height: 1.6;
                color: #333;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
            }}
            
            .container {{
                max-width: 1400px;
                margin: 0 auto;
                padding: 20px;
            }}
            
            .header {{
                background: rgba(255, 255, 255, 0.95);
                border-radius: 20px;
                padding: 40px;
                text-align: center;
                margin-bottom: 30px;
                box-shadow: 0 15px 35px rgba(0,0,0,0.1);
                backdrop-filter: blur(10px);
            }}
            
            .header h1 {{
                font-size: 3.5em;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
                background-clip: text;
                margin-bottom: 10px;
            }}
            
            .header p {{
                font-size: 1.3em;
                color: #666;
                margin-bottom: 20px;
            }}
            
            .meta {{
                display: flex;
                justify-content: center;
                gap: 30px;
                flex-wrap: wrap;
                margin-top: 20px;
            }}
            
            .meta-item {{
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                padding: 10px 20px;
                border-radius: 25px;
                font-weight: bold;
                box-shadow: 0 4px 15px rgba(0,0,0,0.2);
            }}
            
            .main-grid {{
                display: grid;
                grid-template-columns: 1fr 1fr;
                gap: 30px;
                margin-bottom: 30px;
            }}
            
            .card {{
                background: rgba(255, 255, 255, 0.95);
                border-radius: 20px;
                padding: 30px;
                box-shadow: 0 15px 35px rgba(0,0,0,0.1);
                backdrop-filter: blur(10px);
                transition: transform 0.3s ease;
                width: 100%;
                min-width: 0;
                box-sizing: border-box;
            }}
            
            .card:hover {{
                transform: translateY(-5px);
            }}
            
            .card h2 {{
                color: #667eea;
                border-bottom: 3px solid #667eea;
                padding-bottom: 15px;
                margin-bottom: 25px;
                font-size: 1.8em;
            }}
            
            .stats-grid {{
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 20px;
                margin: 25px 0;
            }}
            
            .stat-box {{
                background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
                padding: 20px;
                border-radius: 15px;
                text-align: center;
                border-left: 5px solid #667eea;
            }}
            
            .stat-number {{
                font-size: 2.2em;
                font-weight: bold;
                color: #667eea;
                margin-bottom: 5px;
            }}
            
            .stat-label {{
                color: #666;
                font-size: 0.9em;
            }}
            
            .correlation-list {{
                list-style: none;
                padding: 0;
            }}
            
            .correlation-item {{
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: 12px;
                margin: 8px 0;
                background: #f8f9fa;
                border-radius: 8px;
                border-left: 4px solid;
            }}
            
            .countries-section {{
                background: rgba(255, 255, 255, 0.95);
                border-radius: 20px;
                padding: 30px;
                margin-bottom: 30px;
                box-shadow: 0 15px 35px rgba(0,0,0,0.1);
            }}
            
            .countries-grid {{
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                gap: 20px;
                margin-top: 25px;
            }}
            
            .country-card {{
                background: white;
                border-radius: 15px;
                box-shadow: 0 8px 25px rgba(0,0,0,0.1);
                overflow: hidden;
                transition: transform 0.3s ease;
                border-top: 5px solid;
            }}
            
            .country-card:hover {{
                transform: translateY(-5px);
            }}
            
            .country-header {{
                padding: 20px;
                color: white;
                text-align: center;
            }}
            
            .country-body {{
                padding: 20px;
            }}
            
            .methodology-section {{
                background: rgba(255, 255, 255, 0.95);
                border-radius: 20px;
                padding: 30px;
                margin-bottom: 30px;
                box-shadow: 0 15px 35px rgba(0,0,0,0.1);
            }}
            
            .formula-box {{
                background: #f8f9fa;
                border: 2px solid #667eea;
                border-radius: 10px;
                padding: 20px;
                margin: 15px 0;
                font-family: 'Courier New', monospace;
                text-align: center;
            }}
            
            .navigation {{
                display: flex;
                gap: 15px;
                flex-wrap: wrap;
                margin-top: 20px;
            }}
            
            .nav-button {{
                display: inline-block;
                padding: 12px 24px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                text-decoration: none;
                border-radius: 25px;
                font-weight: bold;
                transition: opacity 0.3s ease;
                box-shadow: 0 4px 15px rgba(0,0,0,0.2);
            }}
            
            .nav-button:hover {{
                opacity: 0.9;
                transform: translateY(-2px);
            }}
            
            @media (max-width: 768px) {{
                .main-grid {{
                    grid-template-columns: 1fr;
                }}
            }}
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üèõÔ∏è –í–ª–∏—è–Ω–∏–µ –¥–æ–≤–µ—Ä–∏—è –∫ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É –Ω–∞ –∞–¥–æ–ø—Ü–∏—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç</h1>
                <p>–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω –í–æ—Å—Ç–æ—á–Ω–æ–π –ï–≤—Ä–æ–ø—ã (2010-2025)</p>
                <div class="meta">
                    <div class="meta-item">üìä 6 —Å—Ç—Ä–∞–Ω</div>
                    <div class="meta-item">üìÖ 16 –ª–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>
                    <div class="meta-item">üî¢ 96 –Ω–∞–±–ª—é–¥–µ–Ω–∏–π</div>
                    <div class="meta-item">üìà 22 –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è</div>
                </div>
            </div>
            
            <div class="main-grid">
                <div class="card">
                    <h2>üìä –ö–ª—é—á–µ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</h2>
                    <div class="stats-grid">
                        <div class="stat-box">
                            <div class="stat-number">{overall_correlation:.3f}</div>
                            <div class="stat-label">–û–±—â–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è</div>
                        </div>
                        <div class="stat-box">
                            <div class="stat-number">{max_adoption:.1f}%</div>
                            <div class="stat-label">–ú–∞–∫—Å. –∞–¥–æ–ø—Ü–∏—è ({max_adoption_country}, {int(max_adoption_year)})</div>
                        </div>
                        <div class="stat-box">
                            <div class="stat-number">{leader_2025}</div>
                            <div class="stat-label">–õ–∏–¥–µ—Ä 2025</div>
                        </div>
                        <div class="stat-box">
                            <div class="stat-number">{avg_growth:.0f}%</div>
                            <div class="stat-label">–†–æ—Å—Ç —Å 2010</div>
                        </div>
                    </div>
                    <div style="margin-top: 20px; padding: 15px; background: #e3f2fd; border-radius: 8px; border-left: 4px solid #2196f3;">
                        <p><strong>üí° –ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –æ–±—â–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è {overall_correlation:.3f}?</strong></p>
                        <p>–≠—Ç–æ —Å—Ä–µ–¥–Ω—è—è —Å–≤—è–∑—å –º–µ–∂–¥—É –∏–Ω—Ñ–ª—è—Ü–∏–µ–π –∏ –∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏–µ–π –ø–æ –≤—Å–µ–º —Å—Ç—Ä–∞–Ω–∞–º –∏ –≥–æ–¥–∞–º. 
                        –°–ª–∞–±–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ —Å–≤—è–∑—å <strong>–ù–ï —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞</strong> –∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ç—Ä–∞–Ω—ã, 
                        –ø–µ—Ä–∏–æ–¥–∞ –∏ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞. –≠—Ç–æ –Ω–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!</p>
                    </div>
                </div>
    <div class="main-grid">
        <div class="card">
            <h2>üìà –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã</h2>
    <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 15px 0;">
        <h4>üéØ –ö–ª–∞—Å—Ç–µ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω</h4>
        <div style="text-align: center; margin: 15px 0;">
            <img src="grafiki/cluster_preview.png" alt="–ö–ª–∞—Å—Ç–µ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑" style="max-width: 100%; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
        </div>
        <a href="grafiki/cluster_analysis.html" class="nav-button">üéØ –û—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –≤–µ—Ä—Å–∏—é</a>
    </div>
    <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 15px 0;">
        <h4>üìà –†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑</h4>
        <div style="text-align: center; margin: 15px 0;">
            <img src="grafiki/regression_preview.png" alt="–†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑" style="max-width: 100%; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
        </div>
        <a href="grafiki/regression_trust_btc.html" class="nav-button">üìà –û—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –≤–µ—Ä—Å–∏—é</a>
    </div>
</div>


    
    <div class="card">
        <h2>üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–∏–ø–æ—Ç–µ–∑</h2>
        <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin: 15px 0;">
            <h4>H1: –ö—Ä–∏–∑–∏—Å–Ω–∞—è –≥–∏–ø–æ—Ç–µ–∑–∞</h4>
            <span style="background: #fff3cd; padding: 5px 10px; border-radius: 15px; color: #856404;">–ß–ê–°–¢–ò–ß–ù–û –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê</span>
            <p>–†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –¥–µ–º–æ–∫—Ä–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∞—Ö</p>
        </div>
        <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin: 15px 0;">
            <h4>H2: –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –≥–∏–ø–æ—Ç–µ–∑–∞</h4>
            <span style="background: #d4edda; padding: 5px 10px; border-radius: 15px; color: #155724;">–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê</span>
            <p>HDI-–∫—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏—è: r = {overall_hdi_crypto_corr:.3f}</p> 
        </div>
        <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin: 15px 0;">
            <h4>H3: –ê–≤—Ç–æ—Ä–∏—Ç–∞—Ä–Ω–æ–µ –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ</h4>
            <span style="background: #d4edda; padding: 5px 10px; border-radius: 15px; color: #155724;">–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê</span>
            <p>–ë–µ–ª–∞—Ä—É—Å—å: r = -0.413 (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π)</p>
        </div>
        <a href="hypothesis_analysis.html" class="nav-button" style="margin-top: 15px; display: inline-block;">
            üéØ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≥–∏–ø–æ—Ç–µ–∑
        </a>
        </div>
    </div>

                <div class="card">
                    <h2>üéØ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º</h2>
                    <ul class="correlation-list">
    """
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
    for country, corr in country_corr.items():
        color = '#FF6B6B' if country == '–£–∫—Ä–∞–∏–Ω–∞' else '#4ECDC4' if country == '–ü–æ–ª—å—à–∞' else '#45B7D1' if country == '–ß–µ—Ö–∏—è' else '#96CEB4' if country == '–®–≤–µ—Ü–∏—è' else '#FFEAA7' if country == '–ù–æ—Ä–≤–µ–≥–∏—è' else '#DDA0DD'
        html_content += f"""
                        <li class="correlation-item" style="border-left-color: {color};">
                            <span><strong>{country}</strong></span>
                            <span style="color: {color}; font-weight: bold;">{corr}</span>
                        </li>
        """
    
    html_content += f"""
                    </ul>
                </div>
            </div>
            
            <div class="main-grid">
                <div class="card">
                    <h2>üìÖ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º</h2>
                    <ul class="correlation-list">
    """
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
    for period, corr in period_corr.items():
        html_content += f"""
                        <li class="correlation-item" style="border-left-color: #667eea;">
                            <span><strong>{period}</strong></span>
                            <span style="color: #667eea; font-weight: bold;">{corr}</span>
                        </li>
        """
    
    html_content += f"""
                    </ul>
                </div>
                
                <div class="card">
                    <h2>üî¢ –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤</h2>
                    <p><strong>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ü–∏—Ä—Å–æ–Ω–∞:</strong></p>
                    <div class="formula-box">
                        r = Œ£[(Xi - XÃÑ)(Yi - »≤)] / ‚àö[Œ£(Xi - XÃÑ)¬≤ √ó Œ£(Yi - »≤)¬≤]
                    </div>
                    <p><strong>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:</strong></p>
                    <ul style="margin-left: 20px;">
                        <li>|r| > 0.7 - –æ—á–µ–Ω—å —Å–∏–ª—å–Ω–∞—è —Å–≤—è–∑—å</li>
                        <li>|r| > 0.5 - —Å–∏–ª—å–Ω–∞—è —Å–≤—è–∑—å</li>
                        <li>|r| > 0.3 - —É–º–µ—Ä–µ–Ω–Ω–∞—è —Å–≤—è–∑—å</li>
                        <li>|r| ‚â§ 0.3 - —Å–ª–∞–±–∞—è —Å–≤—è–∑—å</li>
                        <li>r < 0 - –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å–≤—è–∑—å</li>
                    </ul>
                </div>
            </div>
            
            <div class="countries-section">
                <h2 style="color: #667eea; text-align: center; margin-bottom: 30px;">üåç –ê–Ω–∞–ª–∏–∑ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º</h2>
                <div class="countries-grid">
    """
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç—Ä–∞–Ω
    for country_code, country_info in countries.items():
        country_name = country_info['name_ru']
        country_corr_value = country_corr.get(country_name, 0)
        html_content += f"""
                    <div class="country-card" style="border-top-color: {colors[country_code]};">
                        <div class="country-header" style="background: {colors[country_code]};">
                            <h3>{country_name}</h3>
                            <p>{country_info['currency']} ‚Ä¢ {country_info['strategy_type']}</p>
                        </div>
                        <div class="country-body">
                            <p><strong>–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è:</strong> {country_corr_value}</p>
                            <p><strong>–ù–∞—Å–µ–ª–µ–Ω–∏–µ:</strong> {country_info['population']} –º–ª–Ω</p>
                            <p><strong>–û—Å–Ω–æ–≤–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</strong> {', '.join(country_info['main_crypto'])}</p>
                            <p><strong>–î—Ä–∞–π–≤–µ—Ä—ã:</strong> {country_info['crypto_drivers'][:50]}...</p>
                            <a href="strany_analiz/{country_code.lower()}/{country_code.lower()}_analysis.html" class="nav-button" style="margin-top: 15px; display: inline-block;">
                                üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                            </a>
                        </div>
                    </div>
        """
    
    html_content += f"""
                </div>
            </div>
            
            <div class="methodology-section">
                <h2 style="color: #667eea; text-align: center; margin-bottom: 30px;">üìö –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞</h2>
                <div class="navigation">
                    <a href="hypothesis_analysis.html" class="nav-button">üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–∏–ø–æ—Ç–µ–∑</a>
                    <a href="grafiki/interactive_dynamics.html" class="nav-button">üé® –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞</a>
                    <a href="grafiki/cluster_analysis.html" class="nav-button">üéØ –ö–ª–∞—Å—Ç–µ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑</a>
                    <a href="grafiki/regression_trust_btc.html" class="nav-button">üìà –†–µ–≥—Ä–µ—Å—Å–∏—è Trust‚ÜíBTC</a>
                    <a href="otchety/extended_correlation_analysis.xlsx" class="nav-button">üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏</a>
                    <a href="grafiki/02_inflation_vs_crypto.png" class="nav-button">üîó –ì—Ä–∞—Ñ–∏–∫ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏</a>
                    <a href="grafiki/03_countries_comparison_2025.png" class="nav-button">üèÜ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω</a>
                    <a href="otchety/full_crypto_analysis_2010_2025.xlsx" class="nav-button">üìã Excel –æ—Ç—á–µ—Ç</a>
                    <a href="dannye/" class="nav-button">üíæ –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</a>
                    <a href="rezultaty/osnovnye_vyvody.txt" class="nav-button">üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã</a>
                    <a href="rezultaty/polnaya_metodologiya_i_formuly.txt" class="nav-button">üî¨ –ü–æ–ª–Ω–∞—è –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è</a>
                    <a href="strany_analiz/index.html" class="nav-button">üåç –í—Å–µ —Å—Ç—Ä–∞–Ω—ã</a>
                </div>
                
                <div style="margin-top: 30px; padding: 20px; background: #f8f9fa; border-radius: 10px;">
                    <h3 style="color: #667eea;">üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:</h3>
                    <ol style="margin-left: 20px; margin-top: 15px;">
                        <li><strong>–ì–∏–ø–æ—Ç–µ–∑–∞ H0 –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ:</strong> –ë–µ–ª–∞—Ä—É—Å—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é (-0.413) - —á–µ–º –±–æ–ª—å—à–µ –∏–Ω—Ñ–ª—è—Ü–∏—è, —Ç–µ–º –º–µ–Ω—å—à–µ –∞–¥–æ–ø—Ü–∏—è BTC</li>
                        <li><strong>–°—Ç–∞–±–∏–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã (–®–≤–µ—Ü–∏—è, –ù–æ—Ä–≤–µ–≥–∏—è):</strong> –ê–¥–æ–ø—Ü–∏—è BTC –¥–≤–∏–∂–∏–º–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏, –∞ –Ω–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–º –¥–æ–≤–µ—Ä–∏—è</li>
                        <li><strong>–°—Ç—Ä–∞–Ω—ã —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–ü–æ–ª—å—à–∞, –ß–µ—Ö–∏—è):</strong> –£–º–µ—Ä–µ–Ω–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è - –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è</li>
                        <li><strong>–£–∫—Ä–∞–∏–Ω–∞ - –æ—Å–æ–±—ã–π —Å–ª—É—á–∞–π:</strong> –í–æ–π–Ω–∞ –∫–∞—Ç–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–∞—Å—Å–æ–≤—É—é –∞–¥–æ–ø—Ü–∏—é –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç—ã</li>
                        <li><strong>–ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –≤–∞–∂–Ω–µ–µ —ç–∫–æ–Ω–æ–º–∏–∫–∏:</strong> –ë–µ–ª–∞—Ä—É—Å—å –±–ª–æ–∫–∏—Ä—É–µ—Ç –∞–¥–æ–ø—Ü–∏—é –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –≤—ã—Å–æ–∫—É—é –∏–Ω—Ñ–ª—è—Ü–∏—é</li>
                    </ol>
                </div>
                
                <div style="margin-top: 20px; text-align: center; color: #666;">
                    <p>üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 23 –º–∞—è 2025 | üî¨ –°—Ç–∞—Ç—É—Å: –ì–æ—Ç–æ–≤–æ –¥–ª—è –Ω–∞—É—á–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</p>
                </div>
            </div>
        </div>
    </body>
    </html>
    """
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
    main_index_path = os.path.join(base, 'index.html')
    with open(main_index_path, 'w', encoding='utf-8') as f:
        f.write(html_content)
    
    print(f"‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: {main_index_path}")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ CSV EXPORT ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def save_clean_excel(df: pd.DataFrame, base: str):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ Excel —Ñ–∞–π–ª–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º —á–∏—Å–µ–ª"""
    print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ Excel...")
    excel_df = optimize_int_columns(df.copy())
    excel_df['Year'] = excel_df['Year'].astype(int)
    
    # –ü–û–õ–ù–û–ï –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
    excel_df = excel_df.rename(columns={
        "Year": "–ì–æ–¥",
        "Country": "–ö–æ–¥_—Å—Ç—Ä–∞–Ω—ã",
        "Country_RU": "–°—Ç—Ä–∞–Ω–∞",
        "Currency": "–í–∞–ª—é—Ç–∞",
        "GDP_Per_Capita": "–í–í–ü_–Ω–∞_–¥—É—à—É_USD",
        "Inflation": "–ò–Ω—Ñ–ª—è—Ü–∏—è_%",
        "Crypto_Adoption": "–ö—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏—è_%",
        "GDP_Growth": "–†–æ—Å—Ç_–í–í–ü_%",
        "Currency_Volatility": "–í–∞–ª—é—Ç–Ω–∞—è_–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å_%",
        "Unemployment": "–ë–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–∞_%",
        "Exports": "–≠–∫—Å–ø–æ—Ä—Ç_–º–ª—Ä–¥_USD",
        "Imports": "–ò–º–ø–æ—Ä—Ç_–º–ª—Ä–¥_USD",
        "Government_Debt": "–ì–æ—Å_–¥–æ–ª–≥_%_–í–í–ü",
        "Government_Trust": "–î–æ–≤–µ—Ä–∏–µ_–∫_–ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤—É_%",
        "Corruption_Index": "–ò–Ω–¥–µ–∫—Å_–∫–æ—Ä—Ä—É–ø—Ü–∏–∏_0_100",
        "Political_Stability": "–ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∞—è_—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å",
        "HDI": "–ò–Ω–¥–µ–∫—Å_—á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ_—Ä–∞–∑–≤–∏—Ç–∏—è",
        "Population": "–ù–∞—Å–µ–ª–µ–Ω–∏–µ_–º–ª–Ω",
        "Internet_Penetration": "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç_–ø—Ä–æ–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–µ_%",
        "Strategy_Type": "–¢–∏–ø_—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏",
        "Main_Crypto": "–û—Å–Ω–æ–≤–Ω—ã–µ_–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã",
        "Crypto_Preference": "–ö—Ä–∏–ø—Ç–æ–ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è",
        "Crypto_Drivers": "–î—Ä–∞–π–≤–µ—Ä—ã_–∞–¥–æ–ø—Ü–∏–∏"
    })
    
    ts = _dt.datetime.now().strftime("%Y%m%d_%H%M%S")
    fn = os.path.join(base, "dannye", f"clean_dataset_{ts}.xlsx")
    
    try:
        excel_df.to_excel(fn, index=False, engine='openpyxl')
        print(f"‚úÖ Excel —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {fn}")
    except PermissionError:
        backup_fn = os.path.join(base, f"dataset_backup_{ts}.xlsx")
        excel_df.to_excel(backup_fn, index=False, engine='openpyxl')
        print(f"‚úÖ Excel —Å–æ–∑–¥–∞–Ω –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ: {backup_fn}")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ MAIN ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def create_countries_comparison_chart(df, countries, base):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω –≤ 2025 –≥–æ–¥—É"""
    print("üèÜ –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω...")
    
    # –î–∞–Ω–Ω—ã–µ –∑–∞ 2025 –≥–æ–¥
    data_2025 = df[df['Year'] == 2025].copy()
    data_2025 = data_2025.sort_values('Crypto_Adoption', ascending=True)
    
    colors = {'Ukraine': '#FF6B6B', 'Poland': '#4ECDC4', 'Czech': '#45B7D1', 
              'Sweden': '#96CEB4', 'Norway': '#FFEAA7', 'Belarus': '#DDA0DD'}
    
    plt.figure(figsize=(12, 8))
    
    bars = plt.barh(data_2025['Country_RU'], data_2025['Crypto_Adoption'], 
                    color=[colors[country] for country in data_2025['Country']])
    
    plt.title('–ö—Ä–∏–ø—Ç–æ–∞–¥–æ–ø—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∞–º –≤ 2025 –≥–æ–¥—É', fontsize=16, fontweight='bold')
    plt.xlabel('–ü—Ä–æ—Ü–µ–Ω—Ç –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ (%)', fontsize=12)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for i, bar in enumerate(bars):
        width = bar.get_width()
        plt.text(width + 0.1, bar.get_y() + bar.get_height()/2, 
                f'{width:.1f}%', ha='left', va='center', fontweight='bold', fontsize=12)
    
    plt.tight_layout()
    plt.savefig(os.path.join(base, 'grafiki', '03_countries_comparison_2025.png'), dpi=300, bbox_inches='tight')
    plt.close()
    
    print("‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω —Å–æ–∑–¥–∞–Ω!")

def main():
    print("üöÄ –ê–ù–ê–õ–ò–ó: –í–ª–∏—è–Ω–∏–µ –¥–æ–≤–µ—Ä–∏—è –∫ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É –Ω–∞ –∞–¥–æ–ø—Ü–∏—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
    print("=" * 70)
    
    base = create_project_structure()
    df, countries = create_extended_data_2010_2025()
    save_clean_excel(df, base)
    corr_m, c_corr, p_corr = create_comprehensive_analysis(df, countries, base)
    create_countries_comparison_chart(df, countries, base)
    
    # –ù–û–í–´–ï –ê–ù–ê–õ–ò–ó–´
    create_interactive_dynamics_chart(df, countries, base)
    trust_corr, overall_trust, fig_trust = create_trust_btc_analysis(df, countries, base)
    extended_corr, clusters, regression = create_extended_correlation_analysis(df, countries, base)
    crisis_corr, stable_corr, transition_corr = create_hypothesis_analysis(df, countries, base)
    
    create_excel_reports(df, countries, corr_m, c_corr, p_corr, base)
    create_country_analysis_pages(df, countries, base)
    create_results_summary(df, countries, c_corr, p_corr, base)
    create_methodology_and_sources(base)
    create_full_methodology_document(base)
    create_static_preview_charts(df, countries, base)
    create_main_project_index(df, countries, c_corr, p_corr, base)
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\nüìä –ö–õ–Æ–ß–ï–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("=" * 50)
    print(f"üèõÔ∏è –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –¥–æ–≤–µ—Ä–∏–µ-BTC: {overall_trust:.3f}")
    print(f"üìä –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è HDI-BTC: {df['HDI'].corr(df['Crypto_Adoption']):.3f}")
    print(f"üìà –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –∏–Ω—Ñ–ª—è—Ü–∏—è-BTC: {df['Inflation'].corr(df['Crypto_Adoption']):.3f}")
    print(f"üéØ –ö–ª–∞—Å—Ç–µ—Ä–æ–≤ —Å—Ç—Ä–∞–Ω: {len(clusters['–ö–ª–∞—Å—Ç–µ—Ä'].unique())}")
    print(f"üèÜ –õ–∏–¥–µ—Ä –∞–¥–æ–ø—Ü–∏–∏ 2025: {df[df['Year']==2025].loc[df[df['Year']==2025]['Crypto_Adoption'].idxmax(), 'Country_RU']}")
    
    print("üèÅ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    try:
        main()
    except Exception as exc:
        print(f"‚ùå –û—à–∏–±–∫–∞: {exc}")
        import traceback
        traceback.print_exc()
